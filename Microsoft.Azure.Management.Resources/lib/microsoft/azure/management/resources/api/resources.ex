# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Resources.Api.Resources do
  @moduledoc """
  API calls for all endpoints tagged `Resources`.
  """

  alias Microsoft.Azure.Management.Resources.Connection
  import Microsoft.Azure.Management.Resources.RequestBuilder


  @doc """
  Checks whether a resource exists.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group containing the resource to check. The name is case insensitive.
  - resource_provider_namespace (String.t): The resource provider of the resource to check.
  - parent_resource_path (String.t): The parent resource identity.
  - resource_type (String.t): The resource type.
  - resource_name (String.t): The name of the resource to check whether it exists.
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec resources_check_existence(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def resources_check_existence(connection, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:head)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/providers/#{resource_provider_namespace}/#{parent_resource_path}/#{resource_type}/#{resource_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Checks by ID whether a resource exists.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_id (String.t): The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec resources_check_existence_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def resources_check_existence_by_id(connection, resource_id, api_version, _opts \\ []) do
    %{}
    |> method(:head)
    |> url("/#{resource_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Creates a resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group for the resource. The name is case insensitive.
  - resource_provider_namespace (String.t): The namespace of the resource provider.
  - parent_resource_path (String.t): The parent resource identity.
  - resource_type (String.t): The resource type of the resource to create.
  - resource_name (String.t): The name of the resource to create.
  - api_version (String.t): The API version to use for the operation.
  - parameters (GenericResource): Parameters for creating or updating the resource.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.GenericResource{}} on success
  {:error, info} on failure
  """
  @spec resources_create_or_update(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Resources.Model.GenericResource.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.GenericResource.t} | {:error, Tesla.Env.t}
  def resources_create_or_update(connection, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, parameters, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/providers/#{resource_provider_namespace}/#{parent_resource_path}/#{resource_type}/#{resource_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.GenericResource{})
  end

  @doc """
  Create a resource by ID.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_id (String.t): The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
  - api_version (String.t): The API version to use for the operation.
  - parameters (GenericResource): Create or update resource parameters.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.GenericResource{}} on success
  {:error, info} on failure
  """
  @spec resources_create_or_update_by_id(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Resources.Model.GenericResource.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.GenericResource.t} | {:error, Tesla.Env.t}
  def resources_create_or_update_by_id(connection, resource_id, api_version, parameters, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{resource_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.GenericResource{})
  end

  @doc """
  Deletes a resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group that contains the resource to delete. The name is case insensitive.
  - resource_provider_namespace (String.t): The namespace of the resource provider.
  - parent_resource_path (String.t): The parent resource identity.
  - resource_type (String.t): The resource type.
  - resource_name (String.t): The name of the resource to delete.
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec resources_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def resources_delete(connection, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/providers/#{resource_provider_namespace}/#{parent_resource_path}/#{resource_type}/#{resource_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes a resource by ID.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_id (String.t): The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec resources_delete_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def resources_delete_by_id(connection, resource_id, api_version, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{resource_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group containing the resource to get. The name is case insensitive.
  - resource_provider_namespace (String.t): The namespace of the resource provider.
  - parent_resource_path (String.t): The parent resource identity.
  - resource_type (String.t): The resource type of the resource.
  - resource_name (String.t): The name of the resource to get.
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.GenericResource{}} on success
  {:error, info} on failure
  """
  @spec resources_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.GenericResource.t} | {:error, Tesla.Env.t}
  def resources_get(connection, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/providers/#{resource_provider_namespace}/#{parent_resource_path}/#{resource_type}/#{resource_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.GenericResource{})
  end

  @doc """
  Gets a resource by ID.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_id (String.t): The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.GenericResource{}} on success
  {:error, info} on failure
  """
  @spec resources_get_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.GenericResource.t} | {:error, Tesla.Env.t}
  def resources_get_by_id(connection, resource_id, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{resource_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.GenericResource{})
  end

  @doc """
  Get all the resources in a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): The filter to apply on the operation.
    - :__expand (String.t): The $expand query parameter.
    - :__top (integer()): The number of results to return. If null is passed, returns all resource groups.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.ResourceListResult{}} on success
  {:error, info} on failure
  """
  @spec resources_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.ResourceListResult.t} | {:error, Tesla.Env.t}
  def resources_list(connection, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query,
      :"$expand" => :query,
      :"$top" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resources")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.ResourceListResult{})
  end

  @doc """
  Moves resources from one resource group to another resource group.
  The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - source_resource_group_name (String.t): The name of the resource group containing the resources to move.
  - parameters (ResourcesMoveInfo): Parameters for moving resources.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec resources_move_resources(Tesla.Env.client, String.t, Microsoft.Azure.Management.Resources.Model.ResourcesMoveInfo.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def resources_move_resources(connection, source_resource_group_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{source_resource_group_name}/moveResources")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Updates a resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group for the resource. The name is case insensitive.
  - resource_provider_namespace (String.t): The namespace of the resource provider.
  - parent_resource_path (String.t): The parent resource identity.
  - resource_type (String.t): The resource type of the resource to update.
  - resource_name (String.t): The name of the resource to update.
  - api_version (String.t): The API version to use for the operation.
  - parameters (GenericResource): Parameters for updating the resource.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.GenericResource{}} on success
  {:error, info} on failure
  """
  @spec resources_update(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Resources.Model.GenericResource.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.GenericResource.t} | {:error, Tesla.Env.t}
  def resources_update(connection, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, parameters, subscription_id, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/providers/#{resource_provider_namespace}/#{parent_resource_path}/#{resource_type}/#{resource_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.GenericResource{})
  end

  @doc """
  Updates a resource by ID.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_id (String.t): The fully qualified ID of the resource, including the resource name and resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
  - api_version (String.t): The API version to use for the operation.
  - parameters (GenericResource): Update resource parameters.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.GenericResource{}} on success
  {:error, info} on failure
  """
  @spec resources_update_by_id(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Resources.Model.GenericResource.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.GenericResource.t} | {:error, Tesla.Env.t}
  def resources_update_by_id(connection, resource_id, api_version, parameters, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/#{resource_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.GenericResource{})
  end

  @doc """
  Validates whether resources can be moved from one resource group to another resource group.
  This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - source_resource_group_name (String.t): The name of the resource group containing the resources to validate for move.
  - parameters (ResourcesMoveInfo): Parameters for moving resources.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec resources_validate_move_resources(Tesla.Env.client, String.t, Microsoft.Azure.Management.Resources.Model.ResourcesMoveInfo.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def resources_validate_move_resources(connection, source_resource_group_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{source_resource_group_name}/validateMoveResources")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
