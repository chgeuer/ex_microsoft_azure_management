# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Resources.Api.Providers do
  @moduledoc """
  API calls for all endpoints tagged `Providers`.
  """

  alias Microsoft.Azure.Management.Resources.Connection
  import Microsoft.Azure.Management.Resources.RequestBuilder


  @doc """
  Gets the specified resource provider.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_provider_namespace (String.t): The namespace of the resource provider.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__expand (String.t): The $expand query parameter. For example, to include property aliases in response, use $expand&#x3D;resourceTypes/aliases.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.Provider{}} on success
  {:error, info} on failure
  """
  @spec providers_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.Provider.t} | {:error, Tesla.Env.t}
  def providers_get(connection, resource_provider_namespace, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$expand" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/#{resource_provider_namespace}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.Provider{})
  end

  @doc """
  Gets all resource providers for a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__top (integer()): The number of results to return. If null is passed returns all deployments.
    - :__expand (String.t): The properties to include in the results. For example, use &amp;$expand&#x3D;metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand&#x3D;resourceTypes/aliases.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.ProviderListResult{}} on success
  {:error, info} on failure
  """
  @spec providers_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.ProviderListResult.t} | {:error, Tesla.Env.t}
  def providers_list(connection, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$expand" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.ProviderListResult{})
  end

  @doc """
  Registers a subscription with a resource provider.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_provider_namespace (String.t): The namespace of the resource provider to register.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.Provider{}} on success
  {:error, info} on failure
  """
  @spec providers_register(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.Provider.t} | {:error, Tesla.Env.t}
  def providers_register(connection, resource_provider_namespace, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/providers/#{resource_provider_namespace}/register")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.Provider{})
  end

  @doc """
  Unregisters a subscription from a resource provider.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_provider_namespace (String.t): The namespace of the resource provider to unregister.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.Provider{}} on success
  {:error, info} on failure
  """
  @spec providers_unregister(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.Provider.t} | {:error, Tesla.Env.t}
  def providers_unregister(connection, resource_provider_namespace, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/providers/#{resource_provider_namespace}/unregister")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.Provider{})
  end
end
