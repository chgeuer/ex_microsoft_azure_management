# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Authorization.Api.PolicyAssignments do
  @moduledoc """
  API calls for all endpoints tagged `PolicyAssignments`.
  """

  alias Microsoft.Azure.Management.Authorization.Connection
  import Microsoft.Azure.Management.Authorization.RequestBuilder


  @doc """
  Creates a policy assignment.
  Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - scope (String.t): The scope of the policy assignment.
  - policy_assignment_name (String.t): The name of the policy assignment.
  - parameters (PolicyAssignment): Parameters for the policy assignment.
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_create(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Authorization.Model.PolicyAssignment.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignment.t} | {:error, Tesla.Env.t}
  def policy_assignments_create(connection, scope, policy_assignment_name, parameters, api_version, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{scope}/providers/Microsoft.Authorization/policyAssignments/#{policy_assignment_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{})
  end

  @doc """
  Creates a policy assignment by ID.
  Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group. When providing a scope for the assigment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_assignment_id (String.t): The ID of the policy assignment to create. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;.
  - parameters (PolicyAssignment): Parameters for policy assignment.
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_create_by_id(Tesla.Env.client, String.t, Microsoft.Azure.Management.Authorization.Model.PolicyAssignment.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignment.t} | {:error, Tesla.Env.t}
  def policy_assignments_create_by_id(connection, policy_assignment_id, parameters, api_version, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{policy_assignment_id}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{})
  end

  @doc """
  Deletes a policy assignment.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - scope (String.t): The scope of the policy assignment.
  - policy_assignment_name (String.t): The name of the policy assignment to delete.
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignment.t} | {:error, Tesla.Env.t}
  def policy_assignments_delete(connection, scope, policy_assignment_name, api_version, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{scope}/providers/Microsoft.Authorization/policyAssignments/#{policy_assignment_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{})
  end

  @doc """
  Deletes a policy assignment by ID.
  When providing a scope for the assigment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_assignment_id (String.t): The ID of the policy assignment to delete. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;.
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_delete_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignment.t} | {:error, Tesla.Env.t}
  def policy_assignments_delete_by_id(connection, policy_assignment_id, api_version, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{policy_assignment_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{})
  end

  @doc """
  Gets a policy assignment.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - scope (String.t): The scope of the policy assignment.
  - policy_assignment_name (String.t): The name of the policy assignment to get.
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignment.t} | {:error, Tesla.Env.t}
  def policy_assignments_get(connection, scope, policy_assignment_name, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{scope}/providers/Microsoft.Authorization/policyAssignments/#{policy_assignment_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{})
  end

  @doc """
  Gets a policy assignment by ID.
  When providing a scope for the assigment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_assignment_id (String.t): The ID of the policy assignment to get. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;.
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_get_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignment.t} | {:error, Tesla.Env.t}
  def policy_assignments_get_by_id(connection, policy_assignment_id, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{policy_assignment_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignment{})
  end

  @doc """
  Gets all the policy assignments for a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): The filter to apply on the operation.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult.t} | {:error, Tesla.Env.t}
  def policy_assignments_list(connection, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Authorization/policyAssignments")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult{})
  end

  @doc """
  Gets policy assignments for a resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group containing the resource. The name is case insensitive.
  - resource_provider_namespace (String.t): The namespace of the resource provider.
  - parent_resource_path (String.t): The parent resource path.
  - resource_type (String.t): The resource type.
  - resource_name (String.t): The name of the resource with policy assignments.
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): The filter to apply on the operation.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_list_for_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult.t} | {:error, Tesla.Env.t}
  def policy_assignments_list_for_resource(connection, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/providers/#{resource_provider_namespace}/#{parent_resource_path}/#{resource_type}/#{resource_name}/providers/Microsoft.Authorization/policyAssignments")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult{})
  end

  @doc """
  Gets policy assignments for the resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group that contains policy assignments.
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): The filter to apply on the operation.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult{}} on success
  {:error, info} on failure
  """
  @spec policy_assignments_list_for_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult.t} | {:error, Tesla.Env.t}
  def policy_assignments_list_for_resource_group(connection, resource_group_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Authorization/policyAssignments")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyAssignmentListResult{})
  end
end
