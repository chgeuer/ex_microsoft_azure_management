# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Authorization.Api.RoleDefinitions do
  @moduledoc """
  API calls for all endpoints tagged `RoleDefinitions`.
  """

  alias Microsoft.Azure.Management.Authorization.Connection
  import Microsoft.Azure.Management.Authorization.RequestBuilder


  @doc """
  Creates or updates a role definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - scope (String.t): The scope of the role definition.
  - role_definition_id (String.t): The ID of the role definition.
  - role_definition (RoleDefinition): The values for the role definition.
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.RoleDefinition{}} on success
  {:error, info} on failure
  """
  @spec role_definitions_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Authorization.Model.RoleDefinition.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.RoleDefinition.t} | {:error, Tesla.Env.t}
  def role_definitions_create_or_update(connection, scope, role_definition_id, role_definition, api_version, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{scope}/providers/Microsoft.Authorization/roleDefinitions/#{role_definition_id}")
    |> add_param(:body, :body, role_definition)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.RoleDefinition{})
  end

  @doc """
  Deletes a role definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - scope (String.t): The scope of the role definition.
  - role_definition_id (String.t): The ID of the role definition to delete.
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.RoleDefinition{}} on success
  {:error, info} on failure
  """
  @spec role_definitions_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.RoleDefinition.t} | {:error, Tesla.Env.t}
  def role_definitions_delete(connection, scope, role_definition_id, api_version, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{scope}/providers/Microsoft.Authorization/roleDefinitions/#{role_definition_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.RoleDefinition{})
  end

  @doc """
  Get role definition by name (GUID).

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - scope (String.t): The scope of the role definition.
  - role_definition_id (String.t): The ID of the role definition.
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.RoleDefinition{}} on success
  {:error, info} on failure
  """
  @spec role_definitions_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.RoleDefinition.t} | {:error, Tesla.Env.t}
  def role_definitions_get(connection, scope, role_definition_id, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{scope}/providers/Microsoft.Authorization/roleDefinitions/#{role_definition_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.RoleDefinition{})
  end

  @doc """
  Get all role definitions that are applicable at scope and above.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - scope (String.t): The scope of the role definition.
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.RoleDefinitionListResult{}} on success
  {:error, info} on failure
  """
  @spec role_definitions_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.RoleDefinitionListResult.t} | {:error, Tesla.Env.t}
  def role_definitions_list(connection, scope, api_version, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/#{scope}/providers/Microsoft.Authorization/roleDefinitions")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.RoleDefinitionListResult{})
  end
end
