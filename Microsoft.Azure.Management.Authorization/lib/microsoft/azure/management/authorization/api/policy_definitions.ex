# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Authorization.Api.PolicyDefinitions do
  @moduledoc """
  API calls for all endpoints tagged `PolicyDefinitions`.
  """

  alias Microsoft.Azure.Management.Authorization.Connection
  import Microsoft.Azure.Management.Authorization.RequestBuilder


  @doc """
  Creates or updates a policy definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_definition_name (String.t): The name of the policy definition to create.
  - parameters (PolicyDefinition): The policy definition properties.
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_create_or_update(Tesla.Env.client, String.t, Microsoft.Azure.Management.Authorization.Model.PolicyDefinition.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyDefinition.t} | {:error, Tesla.Env.t}
  def policy_definitions_create_or_update(connection, policy_definition_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Authorization/policyDefinitions/#{policy_definition_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{})
  end

  @doc """
  Creates or updates a policy definition at management group level.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_definition_name (String.t): The name of the policy definition to create.
  - parameters (PolicyDefinition): The policy definition properties.
  - api_version (String.t): The API version to use for the operation.
  - management_group_id (String.t): The ID of the management group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_create_or_update_at_management_group(Tesla.Env.client, String.t, Microsoft.Azure.Management.Authorization.Model.PolicyDefinition.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyDefinition.t} | {:error, Tesla.Env.t}
  def policy_definitions_create_or_update_at_management_group(connection, policy_definition_name, parameters, api_version, management_group_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/providers/Microsoft.Management/managementgroups/#{management_group_id}/providers/Microsoft.Authorization/policyDefinitions/#{policy_definition_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{})
  end

  @doc """
  Deletes a policy definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_definition_name (String.t): The name of the policy definition to delete.
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def policy_definitions_delete(connection, policy_definition_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Authorization/policyDefinitions/#{policy_definition_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes a policy definition at management group level.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_definition_name (String.t): The name of the policy definition to delete.
  - api_version (String.t): The API version to use for the operation.
  - management_group_id (String.t): The ID of the management group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_delete_at_management_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def policy_definitions_delete_at_management_group(connection, policy_definition_name, api_version, management_group_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/providers/Microsoft.Management/managementgroups/#{management_group_id}/providers/Microsoft.Authorization/policyDefinitions/#{policy_definition_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the policy definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_definition_name (String.t): The name of the policy definition to get.
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyDefinition.t} | {:error, Tesla.Env.t}
  def policy_definitions_get(connection, policy_definition_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Authorization/policyDefinitions/#{policy_definition_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{})
  end

  @doc """
  Gets the policy definition at management group level.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_definition_name (String.t): The name of the policy definition to get.
  - api_version (String.t): The API version to use for the operation.
  - management_group_id (String.t): The ID of the management group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_get_at_management_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyDefinition.t} | {:error, Tesla.Env.t}
  def policy_definitions_get_at_management_group(connection, policy_definition_name, api_version, management_group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/providers/Microsoft.Management/managementgroups/#{management_group_id}/providers/Microsoft.Authorization/policyDefinitions/#{policy_definition_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{})
  end

  @doc """
  Gets the built in policy definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - policy_definition_name (String.t): The name of the built in policy definition to get.
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_get_built_in(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyDefinition.t} | {:error, Tesla.Env.t}
  def policy_definitions_get_built_in(connection, policy_definition_name, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/providers/Microsoft.Authorization/policyDefinitions/#{policy_definition_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyDefinition{})
  end

  @doc """
  Gets all the policy definitions for a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - api_version (String.t): The API version to use for the operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult.t} | {:error, Tesla.Env.t}
  def policy_definitions_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Authorization/policyDefinitions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult{})
  end

  @doc """
  Gets all the built in policy definitions.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - api_version (String.t): The API version to use for the operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_list_built_in(Tesla.Env.client, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult.t} | {:error, Tesla.Env.t}
  def policy_definitions_list_built_in(connection, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/providers/Microsoft.Authorization/policyDefinitions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult{})
  end

  @doc """
  Gets all the policy definitions for a subscription at management group level.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - api_version (String.t): The API version to use for the operation.
  - management_group_id (String.t): The ID of the management group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult{}} on success
  {:error, info} on failure
  """
  @spec policy_definitions_list_by_management_group(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult.t} | {:error, Tesla.Env.t}
  def policy_definitions_list_by_management_group(connection, api_version, management_group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/providers/Microsoft.Management/managementgroups/#{management_group_id}/providers/Microsoft.Authorization/policyDefinitions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PolicyDefinitionListResult{})
  end
end
