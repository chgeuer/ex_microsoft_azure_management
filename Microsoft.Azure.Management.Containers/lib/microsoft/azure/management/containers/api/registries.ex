# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Containers.Api.Registries do
  @moduledoc """
  API calls for all endpoints tagged `Registries`.
  """

  alias Microsoft.Azure.Management.Containers.Connection
  import Microsoft.Azure.Management.Containers.RequestBuilder


  @doc """
  Creates a container registry with the specified parameters.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - registry (Registry): The parameters for creating a container registry.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.Registry{}} on success
  {:error, info} on failure
  """
  @spec registries_create(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Containers.Model.Registry.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.Registry.t} | {:error, Tesla.Env.t}
  def registries_create(connection, api_version, subscription_id, resource_group_name, registry_name, registry, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, registry)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.Registry{})
  end

  @doc """
  Deletes a container registry.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec registries_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def registries_delete(connection, api_version, subscription_id, resource_group_name, registry_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the properties of the specified container registry.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.Registry{}} on success
  {:error, info} on failure
  """
  @spec registries_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.Registry.t} | {:error, Tesla.Env.t}
  def registries_get(connection, api_version, subscription_id, resource_group_name, registry_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.Registry{})
  end

  @doc """
  Copies an image to this container registry from the specified container registry.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - parameters (ImportImageParameters): The parameters specifying the image to copy and the source container registry.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec registries_import_image(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Containers.Model.ImportImageParameters.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def registries_import_image(connection, api_version, subscription_id, resource_group_name, registry_name, parameters, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/importImage")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Lists all the container registries under the specified subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.RegistryListResult{}} on success
  {:error, info} on failure
  """
  @spec registries_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.RegistryListResult.t} | {:error, Tesla.Env.t}
  def registries_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.ContainerRegistry/registries")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.RegistryListResult{})
  end

  @doc """
  Lists all the container registries under the specified resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.RegistryListResult{}} on success
  {:error, info} on failure
  """
  @spec registries_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.RegistryListResult.t} | {:error, Tesla.Env.t}
  def registries_list_by_resource_group(connection, api_version, subscription_id, resource_group_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.RegistryListResult{})
  end

  @doc """
  Lists the login credentials for the specified container registry.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.RegistryListCredentialsResult{}} on success
  {:error, info} on failure
  """
  @spec registries_list_credentials(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.RegistryListCredentialsResult.t} | {:error, Tesla.Env.t}
  def registries_list_credentials(connection, api_version, subscription_id, resource_group_name, registry_name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/listCredentials")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.RegistryListCredentialsResult{})
  end

  @doc """
  Gets the quota usages for the specified container registry.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.RegistryUsageListResult{}} on success
  {:error, info} on failure
  """
  @spec registries_list_usages(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.RegistryUsageListResult.t} | {:error, Tesla.Env.t}
  def registries_list_usages(connection, api_version, subscription_id, resource_group_name, registry_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/listUsages")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.RegistryUsageListResult{})
  end

  @doc """
  Regenerates one of the login credentials for the specified container registry.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - regenerate_credential_parameters (RegenerateCredentialParameters): Specifies name of the password which should be regenerated -- password or password2.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.RegistryListCredentialsResult{}} on success
  {:error, info} on failure
  """
  @spec registries_regenerate_credential(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Containers.Model.RegenerateCredentialParameters.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.RegistryListCredentialsResult.t} | {:error, Tesla.Env.t}
  def registries_regenerate_credential(connection, api_version, subscription_id, resource_group_name, registry_name, regenerate_credential_parameters, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/regenerateCredential")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, regenerate_credential_parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.RegistryListCredentialsResult{})
  end

  @doc """
  Updates a container registry with the specified parameters.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - registry_update_parameters (RegistryUpdateParameters): The parameters for updating a container registry.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.Registry{}} on success
  {:error, info} on failure
  """
  @spec registries_update(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Containers.Model.RegistryUpdateParameters.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.Registry.t} | {:error, Tesla.Env.t}
  def registries_update(connection, api_version, subscription_id, resource_group_name, registry_name, registry_update_parameters, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, registry_update_parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.Registry{})
  end
end
