# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Containers.Api.Replications do
  @moduledoc """
  API calls for all endpoints tagged `Replications`.
  """

  alias Microsoft.Azure.Management.Containers.Connection
  import Microsoft.Azure.Management.Containers.RequestBuilder


  @doc """
  Creates a replication for a container registry with the specified parameters.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - replication_name (String.t): The name of the replication.
  - replication (Replication): The parameters for creating a replication.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.Replication{}} on success
  {:error, info} on failure
  """
  @spec replications_create(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Containers.Model.Replication.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.Replication.t} | {:error, Tesla.Env.t}
  def replications_create(connection, api_version, subscription_id, resource_group_name, registry_name, replication_name, replication, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/replications/#{replication_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, replication)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.Replication{})
  end

  @doc """
  Deletes a replication from a container registry.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - replication_name (String.t): The name of the replication.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec replications_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def replications_delete(connection, api_version, subscription_id, resource_group_name, registry_name, replication_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/replications/#{replication_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the properties of the specified replication.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - replication_name (String.t): The name of the replication.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.Replication{}} on success
  {:error, info} on failure
  """
  @spec replications_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.Replication.t} | {:error, Tesla.Env.t}
  def replications_get(connection, api_version, subscription_id, resource_group_name, registry_name, replication_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/replications/#{replication_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.Replication{})
  end

  @doc """
  Lists all the replications for the specified container registry.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ReplicationListResult{}} on success
  {:error, info} on failure
  """
  @spec replications_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ReplicationListResult.t} | {:error, Tesla.Env.t}
  def replications_list(connection, api_version, subscription_id, resource_group_name, registry_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/replications")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ReplicationListResult{})
  end

  @doc """
  Updates a replication for a container registry with the specified parameters.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): The client API version.
  - subscription_id (String.t): The Microsoft Azure subscription ID.
  - resource_group_name (String.t): The name of the resource group to which the container registry belongs.
  - registry_name (String.t): The name of the container registry.
  - replication_name (String.t): The name of the replication.
  - replication_update_parameters (ReplicationUpdateParameters): The parameters for updating a replication.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.Replication{}} on success
  {:error, info} on failure
  """
  @spec replications_update(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Containers.Model.ReplicationUpdateParameters.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.Replication.t} | {:error, Tesla.Env.t}
  def replications_update(connection, api_version, subscription_id, resource_group_name, registry_name, replication_name, replication_update_parameters, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerRegistry/registries/#{registry_name}/replications/#{replication_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, replication_update_parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.Replication{})
  end
end
