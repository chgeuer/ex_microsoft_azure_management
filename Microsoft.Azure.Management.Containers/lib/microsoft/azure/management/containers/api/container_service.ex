# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Containers.Api.ContainerService do
  @moduledoc """
  API calls for all endpoints tagged `ContainerService`.
  """

  alias Microsoft.Azure.Management.Containers.Connection
  import Microsoft.Azure.Management.Containers.RequestBuilder


  @doc """
  Creates or updates a container service.
  Creates or updates a container service with the specified configuration of orchestrator, masters, and agents.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - container_service_name (String.t): The name of the container service in the specified subscription and resource group.
  - parameters (ContainerService): Parameters supplied to the Create or Update a Container Service operation.
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ContainerService{}} on success
  {:error, info} on failure
  """
  @spec container_services_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Containers.Model.ContainerService.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ContainerService.t} | {:error, Tesla.Env.t}
  def container_services_create_or_update(connection, resource_group_name, container_service_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/containerServices/#{container_service_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ContainerService{})
  end

  @doc """
  Deletes the specified container service.
  Deletes the specified container service in the specified subscription and resource group. The operation does not delete other resources created as part of creating a container service, including storage accounts, VMs, and availability sets. All the other resources created with the container service are part of the same resource group and can be deleted individually.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - container_service_name (String.t): The name of the container service in the specified subscription and resource group.
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec container_services_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def container_services_delete(connection, resource_group_name, container_service_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/containerServices/#{container_service_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the properties of the specified container service.
  Gets the properties of the specified container service in the specified subscription and resource group. The operation returns the properties including state, orchestrator, number of masters and agents, and FQDNs of masters and agents. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - container_service_name (String.t): The name of the container service in the specified subscription and resource group.
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ContainerService{}} on success
  {:error, info} on failure
  """
  @spec container_services_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ContainerService.t} | {:error, Tesla.Env.t}
  def container_services_get(connection, resource_group_name, container_service_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/containerServices/#{container_service_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ContainerService{})
  end
end
