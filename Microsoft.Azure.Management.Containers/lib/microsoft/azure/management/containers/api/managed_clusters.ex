# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Containers.Api.ManagedClusters do
  @moduledoc """
  API calls for all endpoints tagged `ManagedClusters`.
  """

  alias Microsoft.Azure.Management.Containers.Connection
  import Microsoft.Azure.Management.Containers.RequestBuilder


  @doc """
  Creates or updates a managed cluster.
  Creates or updates a managed cluster with the specified configuration for agents and Kubernetes version.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group.
  - resource_name (String.t): The name of the managed cluster resource.
  - parameters (ManagedCluster): Parameters supplied to the Create or Update a Managed Cluster operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ManagedCluster{}} on success
  {:error, info} on failure
  """
  @spec managed_clusters_create_or_update(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Containers.Model.ManagedCluster.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ManagedCluster.t} | {:error, Tesla.Env.t}
  def managed_clusters_create_or_update(connection, api_version, subscription_id, resource_group_name, resource_name, parameters, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/managedClusters/#{resource_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ManagedCluster{})
  end

  @doc """
  Deletes a managed cluster.
  Deletes the managed cluster with a specified resource group and name.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group.
  - resource_name (String.t): The name of the managed cluster resource.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec managed_clusters_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def managed_clusters_delete(connection, api_version, subscription_id, resource_group_name, resource_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/managedClusters/#{resource_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a managed cluster.
  Gets the details of the managed cluster with a specified resource group and name.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group.
  - resource_name (String.t): The name of the managed cluster resource.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ManagedCluster{}} on success
  {:error, info} on failure
  """
  @spec managed_clusters_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ManagedCluster.t} | {:error, Tesla.Env.t}
  def managed_clusters_get(connection, api_version, subscription_id, resource_group_name, resource_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/managedClusters/#{resource_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ManagedCluster{})
  end

  @doc """
  Gets an access profile of a managed cluster.
  Gets the accessProfile for the specified role name of the managed cluster with a specified resource group and name.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group.
  - resource_name (String.t): The name of the managed cluster resource.
  - role_name (String.t): The name of the role for managed cluster accessProfile resource.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ManagedClusterAccessProfile{}} on success
  {:error, info} on failure
  """
  @spec managed_clusters_get_access_profile(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ManagedClusterAccessProfile.t} | {:error, Tesla.Env.t}
  def managed_clusters_get_access_profile(connection, api_version, subscription_id, resource_group_name, resource_name, role_name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/managedClusters/#{resource_name}/accessProfiles/#{role_name}/listCredential")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ManagedClusterAccessProfile{})
  end

  @doc """
  Gets access profile of a managed cluster.
  Use ManagedClusters_GetAccessProfile instead.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group.
  - resource_name (String.t): The name of the managed cluster resource.
  - role_name (String.t): The name of the role for managed cluster accessProfile resource.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ManagedClusterAccessProfile{}} on success
  {:error, info} on failure
  """
  @spec managed_clusters_get_access_profiles(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ManagedClusterAccessProfile.t} | {:error, Tesla.Env.t}
  def managed_clusters_get_access_profiles(connection, api_version, subscription_id, resource_group_name, resource_name, role_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/managedClusters/#{resource_name}/accessProfiles/#{role_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ManagedClusterAccessProfile{})
  end

  @doc """
  Gets upgrade profile for a managed cluster.
  Gets the details of the upgrade profile for a managed cluster with a specified resource group and name.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group.
  - resource_name (String.t): The name of the managed cluster resource.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ManagedClusterUpgradeProfile{}} on success
  {:error, info} on failure
  """
  @spec managed_clusters_get_upgrade_profile(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ManagedClusterUpgradeProfile.t} | {:error, Tesla.Env.t}
  def managed_clusters_get_upgrade_profile(connection, api_version, subscription_id, resource_group_name, resource_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/managedClusters/#{resource_name}/upgradeProfiles/default")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ManagedClusterUpgradeProfile{})
  end

  @doc """
  Gets a list of managed clusters in the specified subscription.
  Gets a list of managed clusters in the specified subscription. The operation returns properties of each managed cluster.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ManagedClusterListResult{}} on success
  {:error, info} on failure
  """
  @spec managed_clusters_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ManagedClusterListResult.t} | {:error, Tesla.Env.t}
  def managed_clusters_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.ContainerService/managedClusters")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ManagedClusterListResult{})
  end

  @doc """
  Lists managed clusters in the specified subscription and resource group.
  Lists managed clusters in the specified subscription and resource group. The operation returns properties of each managed cluster.

  ## Parameters

  - connection (Microsoft.Azure.Management.Containers.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Containers.Model.ManagedClusterListResult{}} on success
  {:error, info} on failure
  """
  @spec managed_clusters_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Containers.Model.ManagedClusterListResult.t} | {:error, Tesla.Env.t}
  def managed_clusters_list_by_resource_group(connection, api_version, subscription_id, resource_group_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.ContainerService/managedClusters")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Containers.Model.ManagedClusterListResult{})
  end
end
