# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Database.CosmosDb.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias Microsoft.Azure.Management.Database.CosmosDb.Connection
  import Microsoft.Azure.Management.Database.CosmosDb.RequestBuilder


  @doc """
  Retrieves metric defintions for the given collection.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult{}} on success
  {:error, info} on failure
  """
  @spec collection_list_metric_definitions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult.t} | {:error, Tesla.Env.t}
  def collection_list_metric_definitions(connection, subscription_id, resource_group_name, account_name, database_rid, collection_rid, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/collections/#{collection_rid}/metricDefinitions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given database account and collection.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{}} on success
  {:error, info} on failure
  """
  @spec collection_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult.t} | {:error, Tesla.Env.t}
  def collection_list_metrics(connection, subscription_id, resource_group_name, account_name, database_rid, collection_rid, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/collections/#{collection_rid}/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{})
  end

  @doc """
  Retrieves the usages (most recent storage data) for the given collection.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult{}} on success
  {:error, info} on failure
  """
  @spec collection_list_usages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult.t} | {:error, Tesla.Env.t}
  def collection_list_usages(connection, subscription_id, resource_group_name, account_name, database_rid, collection_rid, api_version, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/collections/#{collection_rid}/usages")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given collection, split by partition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult{}} on success
  {:error, info} on failure
  """
  @spec collection_partition_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult.t} | {:error, Tesla.Env.t}
  def collection_partition_list_metrics(connection, subscription_id, resource_group_name, account_name, database_rid, collection_rid, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/collections/#{collection_rid}/partitions/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult{})
  end

  @doc """
  Retrieves the usages (most recent storage data) for the given collection, split by partition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionUsagesResult{}} on success
  {:error, info} on failure
  """
  @spec collection_partition_list_usages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionUsagesResult.t} | {:error, Tesla.Env.t}
  def collection_partition_list_usages(connection, subscription_id, resource_group_name, account_name, database_rid, collection_rid, api_version, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/collections/#{collection_rid}/partitions/usages")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionUsagesResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given collection and region, split by partition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - region (String.t): Cosmos DB region, with spaces between words and each word capitalized.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult{}} on success
  {:error, info} on failure
  """
  @spec collection_partition_region_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult.t} | {:error, Tesla.Env.t}
  def collection_partition_region_list_metrics(connection, subscription_id, resource_group_name, account_name, region, database_rid, collection_rid, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/region/#{region}/databases/#{database_rid}/collections/#{collection_rid}/partitions/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given database account, collection and region.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - region (String.t): Cosmos DB region, with spaces between words and each word capitalized.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{}} on success
  {:error, info} on failure
  """
  @spec collection_region_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult.t} | {:error, Tesla.Env.t}
  def collection_region_list_metrics(connection, subscription_id, resource_group_name, account_name, region, database_rid, collection_rid, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/region/#{region}/databases/#{database_rid}/collections/#{collection_rid}/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given database account and region.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - region (String.t): Cosmos DB region, with spaces between words and each word capitalized.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{}} on success
  {:error, info} on failure
  """
  @spec database_account_region_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult.t} | {:error, Tesla.Env.t}
  def database_account_region_list_metrics(connection, subscription_id, resource_group_name, account_name, region, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/region/#{region}/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{})
  end

  @doc """
  Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &#39;-&#39; character, and must be between 3 and 50 characters.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_check_name_exists(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def database_accounts_check_name_exists(connection, account_name, api_version, _opts \\ []) do
    %{}
    |> method(:head)
    |> url("/providers/Microsoft.DocumentDB/databaseAccountNames/#{account_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Creates or updates an Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - create_update_parameters (DatabaseAccountCreateUpdateParameters): The parameters to provide for the current database account.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_create_or_update(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountCreateUpdateParameters.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount.t} | {:error, Tesla.Env.t}
  def database_accounts_create_or_update(connection, subscription_id, resource_group_name, account_name, api_version, create_update_parameters, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, create_update_parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount{})
  end

  @doc """
  Deletes an existing Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def database_accounts_delete(connection, subscription_id, resource_group_name, account_name, api_version, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 indicates a write region. The maximum value for a failover priority &#x3D; (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - failover_parameters (FailoverPolicies): The new failover policies for the database account.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_failover_priority_change(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Database.CosmosDb.Model.FailoverPolicies.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def database_accounts_failover_priority_change(connection, subscription_id, resource_group_name, account_name, api_version, failover_parameters, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/failoverPriorityChange")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, failover_parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieves the properties of an existing Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount.t} | {:error, Tesla.Env.t}
  def database_accounts_get(connection, subscription_id, resource_group_name, account_name, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount{})
  end

  @doc """
  Lists the read-only access keys for the specified Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListReadOnlyKeysResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_get_read_only_keys(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListReadOnlyKeysResult.t} | {:error, Tesla.Env.t}
  def database_accounts_get_read_only_keys(connection, subscription_id, resource_group_name, account_name, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/readonlykeys")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListReadOnlyKeysResult{})
  end

  @doc """
  Lists all the Azure Cosmos DB database accounts available under the subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - subscription_id (String.t): Azure subscription ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountsListResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountsListResult.t} | {:error, Tesla.Env.t}
  def database_accounts_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.DocumentDB/databaseAccounts")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountsListResult{})
  end

  @doc """
  Lists all the Azure Cosmos DB database accounts available under the given resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - resource_group_name (String.t): Name of an Azure resource group.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - subscription_id (String.t): Azure subscription ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountsListResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountsListResult.t} | {:error, Tesla.Env.t}
  def database_accounts_list_by_resource_group(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountsListResult{})
  end

  @doc """
  Lists the connection strings for the specified Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListConnectionStringsResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_list_connection_strings(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListConnectionStringsResult.t} | {:error, Tesla.Env.t}
  def database_accounts_list_connection_strings(connection, subscription_id, resource_group_name, account_name, api_version, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/listConnectionStrings")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListConnectionStringsResult{})
  end

  @doc """
  Lists the access keys for the specified Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListKeysResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_list_keys(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListKeysResult.t} | {:error, Tesla.Env.t}
  def database_accounts_list_keys(connection, subscription_id, resource_group_name, account_name, api_version, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/listKeys")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListKeysResult{})
  end

  @doc """
  Retrieves metric defintions for the given database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_list_metric_definitions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult.t} | {:error, Tesla.Env.t}
  def database_accounts_list_metric_definitions(connection, subscription_id, resource_group_name, account_name, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/metricDefinitions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult.t} | {:error, Tesla.Env.t}
  def database_accounts_list_metrics(connection, subscription_id, resource_group_name, account_name, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{})
  end

  @doc """
  Lists the read-only access keys for the specified Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListReadOnlyKeysResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_list_read_only_keys(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListReadOnlyKeysResult.t} | {:error, Tesla.Env.t}
  def database_accounts_list_read_only_keys(connection, subscription_id, resource_group_name, account_name, api_version, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/readonlykeys")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountListReadOnlyKeysResult{})
  end

  @doc """
  Retrieves the usages (most recent data) for the given database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_list_usages(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult.t} | {:error, Tesla.Env.t}
  def database_accounts_list_usages(connection, subscription_id, resource_group_name, account_name, api_version, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/usages")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult{})
  end

  @doc """
  Offline the specified region for the specified Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - region_parameter_for_offline (RegionForOnlineOffline): Cosmos DB region to offline for the database account.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_offline_region(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Database.CosmosDb.Model.RegionForOnlineOffline.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def database_accounts_offline_region(connection, subscription_id, resource_group_name, account_name, api_version, region_parameter_for_offline, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/offlineRegion")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, region_parameter_for_offline)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Online the specified region for the specified Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - region_parameter_for_online (RegionForOnlineOffline): Cosmos DB region to online for the database account.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_online_region(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Database.CosmosDb.Model.RegionForOnlineOffline.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def database_accounts_online_region(connection, subscription_id, resource_group_name, account_name, api_version, region_parameter_for_online, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/onlineRegion")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, region_parameter_for_online)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Patches the properties of an existing Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - update_parameters (DatabaseAccountPatchParameters): The tags parameter to patch for the current database account.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_patch(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountPatchParameters.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount.t} | {:error, Tesla.Env.t}
  def database_accounts_patch(connection, subscription_id, resource_group_name, account_name, api_version, update_parameters, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, update_parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccount{})
  end

  @doc """
  Regenerates an access key for the specified Azure Cosmos DB database account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - key_to_regenerate (DatabaseAccountRegenerateKeyParameters): The name of the key to regenerate.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec database_accounts_regenerate_key(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Database.CosmosDb.Model.DatabaseAccountRegenerateKeyParameters.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def database_accounts_regenerate_key(connection, subscription_id, resource_group_name, account_name, api_version, key_to_regenerate, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/regenerateKey")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, key_to_regenerate)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieves metric defintions for the given database.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult{}} on success
  {:error, info} on failure
  """
  @spec database_list_metric_definitions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult.t} | {:error, Tesla.Env.t}
  def database_list_metric_definitions(connection, subscription_id, resource_group_name, account_name, database_rid, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/metricDefinitions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.MetricDefinitionsListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given database account and database.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{}} on success
  {:error, info} on failure
  """
  @spec database_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult.t} | {:error, Tesla.Env.t}
  def database_list_metrics(connection, subscription_id, resource_group_name, account_name, database_rid, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.MetricListResult{})
  end

  @doc """
  Retrieves the usages (most recent data) for the given database.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names).

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult{}} on success
  {:error, info} on failure
  """
  @spec database_list_usages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult.t} | {:error, Tesla.Env.t}
  def database_list_usages(connection, subscription_id, resource_group_name, account_name, database_rid, api_version, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/usages")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.UsagesResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given partition key range id.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - partition_key_range_id (String.t): Partition Key Range Id for which to get data.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult{}} on success
  {:error, info} on failure
  """
  @spec partition_key_range_id_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult.t} | {:error, Tesla.Env.t}
  def partition_key_range_id_list_metrics(connection, subscription_id, resource_group_name, account_name, database_rid, collection_rid, partition_key_range_id, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/databases/#{database_rid}/collections/#{collection_rid}/partitionKeyRangeId/#{partition_key_range_id}/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given partition key range id and region.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - region (String.t): Cosmos DB region, with spaces between words and each word capitalized.
  - database_rid (String.t): Cosmos DB database rid.
  - collection_rid (String.t): Cosmos DB collection rid.
  - partition_key_range_id (String.t): Partition Key Range Id for which to get data.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult{}} on success
  {:error, info} on failure
  """
  @spec partition_key_range_id_region_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult.t} | {:error, Tesla.Env.t}
  def partition_key_range_id_region_list_metrics(connection, subscription_id, resource_group_name, account_name, region, database_rid, collection_rid, partition_key_range_id, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/region/#{region}/databases/#{database_rid}/collections/#{collection_rid}/partitionKeyRangeId/#{partition_key_range_id}/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.PartitionMetricListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given database account. This url is only for PBS and Replication Latency data

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult{}} on success
  {:error, info} on failure
  """
  @spec percentile_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult.t} | {:error, Tesla.Env.t}
  def percentile_list_metrics(connection, subscription_id, resource_group_name, account_name, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/percentile/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given account, source and target region. This url is only for PBS and Replication Latency data

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - source_region (String.t): Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized.
  - target_region (String.t): Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult{}} on success
  {:error, info} on failure
  """
  @spec percentile_source_target_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult.t} | {:error, Tesla.Env.t}
  def percentile_source_target_list_metrics(connection, subscription_id, resource_group_name, account_name, source_region, target_region, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/sourceRegion/#{source_region}/targetRegion/#{target_region}/percentile/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult{})
  end

  @doc """
  Retrieves the metrics determined by the given filter for the given account target region. This url is only for PBS and Replication Latency data

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.CosmosDb.Connection): Connection to server
  - subscription_id (String.t): Azure subscription ID.
  - resource_group_name (String.t): Name of an Azure resource group.
  - account_name (String.t): Cosmos DB database account name.
  - target_region (String.t): Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2015-04-08.
  - __filter (String.t): An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult{}} on success
  {:error, info} on failure
  """
  @spec percentile_target_list_metrics(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult.t} | {:error, Tesla.Env.t}
  def percentile_target_list_metrics(connection, subscription_id, resource_group_name, account_name, target_region, api_version, __filter, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DocumentDB/databaseAccounts/#{account_name}/targetRegion/#{target_region}/percentile/metrics")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:query, :"$filter", __filter)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.CosmosDb.Model.PercentileMetricListResult{})
  end
end
