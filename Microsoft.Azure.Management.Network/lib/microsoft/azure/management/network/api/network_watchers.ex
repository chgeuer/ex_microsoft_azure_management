# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Network.Api.NetworkWatchers do
  @moduledoc """
  API calls for all endpoints tagged `NetworkWatchers`.
  """

  alias Microsoft.Azure.Management.Network.Connection
  import Microsoft.Azure.Management.Network.RequestBuilder


  @doc """
  Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the network watcher resource group.
  - network_watcher_name (String.t): The name of the network watcher resource.
  - parameters (ConnectivityParameters): Parameters that determine how the connectivity check will be performed.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.ConnectivityInformation{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_check_connectivity(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.ConnectivityParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.ConnectivityInformation.t} | {:error, Tesla.Env.t}
  def network_watchers_check_connectivity(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/connectivityCheck")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.ConnectivityInformation{})
  end

  @doc """
  Creates or updates a network watcher in the specified resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher.
  - parameters (NetworkWatcher): Parameters that define the network watcher resource.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.NetworkWatcher{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.NetworkWatcher.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.NetworkWatcher.t} | {:error, Tesla.Env.t}
  def network_watchers_create_or_update(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.NetworkWatcher{})
  end

  @doc """
  Deletes the specified network watcher resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def network_watchers_delete(connection, resource_group_name, network_watcher_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the specified network watcher by resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.NetworkWatcher{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.NetworkWatcher.t} | {:error, Tesla.Env.t}
  def network_watchers_get(connection, resource_group_name, network_watcher_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.NetworkWatcher{})
  end

  @doc """
  Gets the relative latency score for internet service providers from a specified location to Azure regions.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the network watcher resource group.
  - network_watcher_name (String.t): The name of the network watcher resource.
  - parameters (AzureReachabilityReportParameters): Parameters that determine Azure reachability report configuration.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.AzureReachabilityReport{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_get_azure_reachability_report(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.AzureReachabilityReportParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.AzureReachabilityReport.t} | {:error, Tesla.Env.t}
  def network_watchers_get_azure_reachability_report(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/azureReachabilityReport")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.AzureReachabilityReport{})
  end

  @doc """
  Queries status of flow log and traffic analytics (optional) on a specified resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the network watcher resource group.
  - network_watcher_name (String.t): The name of the network watcher resource.
  - parameters (FlowLogStatusParameters): Parameters that define a resource to query flow log and traffic analytics (optional)  status.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.FlowLogInformation{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_get_flow_log_status(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.FlowLogStatusParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.FlowLogInformation.t} | {:error, Tesla.Env.t}
  def network_watchers_get_flow_log_status(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/queryFlowLogStatus")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.FlowLogInformation{})
  end

  @doc """
  Gets the next hop from the specified VM.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher.
  - parameters (NextHopParameters): Parameters that define the source and destination endpoint.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.NextHopResult{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_get_next_hop(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.NextHopParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.NextHopResult.t} | {:error, Tesla.Env.t}
  def network_watchers_get_next_hop(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/nextHop")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.NextHopResult{})
  end

  @doc """
  Gets the current network topology by resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher.
  - parameters (TopologyParameters): Parameters that define the representation of topology.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.Topology{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_get_topology(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.TopologyParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.Topology.t} | {:error, Tesla.Env.t}
  def network_watchers_get_topology(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/topology")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.Topology{})
  end

  @doc """
  Initiate troubleshooting on a specified resource

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher resource.
  - parameters (TroubleshootingParameters): Parameters that define the resource to troubleshoot.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.TroubleshootingResult{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_get_troubleshooting(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.TroubleshootingParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.TroubleshootingResult.t} | {:error, Tesla.Env.t}
  def network_watchers_get_troubleshooting(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/troubleshoot")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.TroubleshootingResult{})
  end

  @doc """
  Get the last completed troubleshooting result on a specified resource

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher resource.
  - parameters (QueryTroubleshootingParameters): Parameters that define the resource to query the troubleshooting result.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.TroubleshootingResult{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_get_troubleshooting_result(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.QueryTroubleshootingParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.TroubleshootingResult.t} | {:error, Tesla.Env.t}
  def network_watchers_get_troubleshooting_result(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/queryTroubleshootResult")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.TroubleshootingResult{})
  end

  @doc """
  Gets the configured and effective security group rules on the specified VM.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher.
  - parameters (SecurityGroupViewParameters): Parameters that define the VM to check security groups for.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.SecurityGroupViewResult{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_get_vm_security_rules(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.SecurityGroupViewParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.SecurityGroupViewResult.t} | {:error, Tesla.Env.t}
  def network_watchers_get_vm_security_rules(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/securityGroupView")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.SecurityGroupViewResult{})
  end

  @doc """
  Gets all network watchers by resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.NetworkWatcherListResult{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_list(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.NetworkWatcherListResult.t} | {:error, Tesla.Env.t}
  def network_watchers_list(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.NetworkWatcherListResult{})
  end

  @doc """
  Gets all network watchers by subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.NetworkWatcherListResult{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_list_all(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.NetworkWatcherListResult.t} | {:error, Tesla.Env.t}
  def network_watchers_list_all(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Network/networkWatchers")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.NetworkWatcherListResult{})
  end

  @doc """
  Lists all available internet service providers for a specified Azure region.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the network watcher resource group.
  - network_watcher_name (String.t): The name of the network watcher resource.
  - parameters (AvailableProvidersListParameters): Parameters that scope the list of available providers.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.AvailableProvidersList{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_list_available_providers(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.AvailableProvidersListParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.AvailableProvidersList.t} | {:error, Tesla.Env.t}
  def network_watchers_list_available_providers(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/availableProvidersList")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.AvailableProvidersList{})
  end

  @doc """
  Configures flow log  and traffic analytics (optional) on a specified resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the network watcher resource group.
  - network_watcher_name (String.t): The name of the network watcher resource.
  - parameters (FlowLogInformation): Parameters that define the configuration of flow log.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.FlowLogInformation{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_set_flow_log_configuration(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.FlowLogInformation.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.FlowLogInformation.t} | {:error, Tesla.Env.t}
  def network_watchers_set_flow_log_configuration(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/configureFlowLog")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.FlowLogInformation{})
  end

  @doc """
  Updates a network watcher tags.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher.
  - parameters (TagsObject): Parameters supplied to update network watcher tags.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.NetworkWatcher{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_update_tags(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.TagsObject.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.NetworkWatcher.t} | {:error, Tesla.Env.t}
  def network_watchers_update_tags(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.NetworkWatcher{})
  end

  @doc """
  Verify IP flow from the specified VM to a location given the currently configured NSG rules.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - network_watcher_name (String.t): The name of the network watcher.
  - parameters (VerificationIpFlowParameters): Parameters that define the IP flow to be verified.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.VerificationIpFlowResult{}} on success
  {:error, info} on failure
  """
  @spec network_watchers_verify_ip_flow(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.VerificationIpFlowParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.VerificationIpFlowResult.t} | {:error, Tesla.Env.t}
  def network_watchers_verify_ip_flow(connection, resource_group_name, network_watcher_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/networkWatchers/#{network_watcher_name}/ipFlowVerify")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.VerificationIpFlowResult{})
  end
end
