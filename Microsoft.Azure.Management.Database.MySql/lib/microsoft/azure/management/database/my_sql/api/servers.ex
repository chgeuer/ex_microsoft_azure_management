# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Database.MySql.Api.Servers do
  @moduledoc """
  API calls for all endpoints tagged `Servers`.
  """

  alias Microsoft.Azure.Management.Database.MySql.Connection
  import Microsoft.Azure.Management.Database.MySql.RequestBuilder


  @doc """
  Creates a new server or updates an existing server. The update action will overwrite the existing server.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.MySql.Connection): Connection to server
  - api_version (String.t): The API version to use for the request.
  - subscription_id (String.t): The subscription ID that identifies an Azure subscription.
  - resource_group_name (String.t): The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  - server_name (String.t): The name of the server.
  - parameters (ServerForCreate): The required parameters for creating or updating a server.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.MySql.Model.Server{}} on success
  {:error, info} on failure
  """
  @spec servers_create(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Database.MySql.Model.ServerForCreate.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.MySql.Model.Server.t} | {:error, Tesla.Env.t}
  def servers_create(connection, api_version, subscription_id, resource_group_name, server_name, parameters, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DBforMySQL/servers/#{server_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.MySql.Model.Server{})
  end

  @doc """
  Deletes a server.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.MySql.Connection): Connection to server
  - api_version (String.t): The API version to use for the request.
  - subscription_id (String.t): The subscription ID that identifies an Azure subscription.
  - resource_group_name (String.t): The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  - server_name (String.t): The name of the server.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec servers_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def servers_delete(connection, api_version, subscription_id, resource_group_name, server_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DBforMySQL/servers/#{server_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets information about a server.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.MySql.Connection): Connection to server
  - api_version (String.t): The API version to use for the request.
  - subscription_id (String.t): The subscription ID that identifies an Azure subscription.
  - resource_group_name (String.t): The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  - server_name (String.t): The name of the server.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.MySql.Model.Server{}} on success
  {:error, info} on failure
  """
  @spec servers_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.MySql.Model.Server.t} | {:error, Tesla.Env.t}
  def servers_get(connection, api_version, subscription_id, resource_group_name, server_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DBforMySQL/servers/#{server_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.MySql.Model.Server{})
  end

  @doc """
  List all the servers in a given subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.MySql.Connection): Connection to server
  - api_version (String.t): The API version to use for the request.
  - subscription_id (String.t): The subscription ID that identifies an Azure subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.MySql.Model.ServerListResult{}} on success
  {:error, info} on failure
  """
  @spec servers_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.MySql.Model.ServerListResult.t} | {:error, Tesla.Env.t}
  def servers_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.DBforMySQL/servers")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.MySql.Model.ServerListResult{})
  end

  @doc """
  List all the servers in a given resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.MySql.Connection): Connection to server
  - api_version (String.t): The API version to use for the request.
  - subscription_id (String.t): The subscription ID that identifies an Azure subscription.
  - resource_group_name (String.t): The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.MySql.Model.ServerListResult{}} on success
  {:error, info} on failure
  """
  @spec servers_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.MySql.Model.ServerListResult.t} | {:error, Tesla.Env.t}
  def servers_list_by_resource_group(connection, api_version, subscription_id, resource_group_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DBforMySQL/servers")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.MySql.Model.ServerListResult{})
  end

  @doc """
  Updates an existing server. The request body can contain one to many of the properties present in the normal server definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Database.MySql.Connection): Connection to server
  - api_version (String.t): The API version to use for the request.
  - subscription_id (String.t): The subscription ID that identifies an Azure subscription.
  - resource_group_name (String.t): The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  - server_name (String.t): The name of the server.
  - parameters (ServerUpdateParameters): The required parameters for updating a server.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Database.MySql.Model.Server{}} on success
  {:error, info} on failure
  """
  @spec servers_update(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.Database.MySql.Model.ServerUpdateParameters.t, keyword()) :: {:ok, Microsoft.Azure.Management.Database.MySql.Model.Server.t} | {:error, Tesla.Env.t}
  def servers_update(connection, api_version, subscription_id, resource_group_name, server_name, parameters, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.DBforMySQL/servers/#{server_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Database.MySql.Model.Server{})
  end
end
