# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.EventHub.Api.Namespaces do
  @moduledoc """
  API calls for all endpoints tagged `Namespaces`.
  """

  alias Microsoft.Azure.Management.EventHub.Connection
  import Microsoft.Azure.Management.EventHub.RequestBuilder


  @doc """
  Check the give Namespace name availability.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - parameters (CheckNameAvailabilityParameter): Parameters to check availability of the given Namespace name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.CheckNameAvailabilityResult{}} on success
  {:error, info} on failure
  """
  @spec namespaces_check_name_availability(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.EventHub.Model.CheckNameAvailabilityParameter.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.CheckNameAvailabilityResult.t} | {:error, Tesla.Env.t}
  def namespaces_check_name_availability(connection, api_version, subscription_id, parameters, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.EventHub/CheckNameAvailability")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.CheckNameAvailabilityResult{})
  end

  @doc """
  Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - parameters (EhNamespace): Parameters for creating a namespace resource.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.EhNamespace{}} on success
  {:error, info} on failure
  """
  @spec namespaces_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.EventHub.Model.EhNamespace.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.EhNamespace.t} | {:error, Tesla.Env.t}
  def namespaces_create_or_update(connection, resource_group_name, namespace_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.EhNamespace{})
  end

  @doc """
  Creates or updates an AuthorizationRule for a Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - authorization_rule_name (String.t): The authorization rule name.
  - parameters (AuthorizationRule): The shared access AuthorizationRule.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.AuthorizationRule{}} on success
  {:error, info} on failure
  """
  @spec namespaces_create_or_update_authorization_rule(Tesla.Env.client, String.t, String.t, String.t, Microsoft.Azure.Management.EventHub.Model.AuthorizationRule.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.AuthorizationRule.t} | {:error, Tesla.Env.t}
  def namespaces_create_or_update_authorization_rule(connection, resource_group_name, namespace_name, authorization_rule_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/AuthorizationRules/#{authorization_rule_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.AuthorizationRule{})
  end

  @doc """
  Deletes an existing namespace. This operation also removes all associated resources under the namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec namespaces_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def namespaces_delete(connection, resource_group_name, namespace_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes an AuthorizationRule for a Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - authorization_rule_name (String.t): The authorization rule name.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec namespaces_delete_authorization_rule(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def namespaces_delete_authorization_rule(connection, resource_group_name, namespace_name, authorization_rule_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/AuthorizationRules/#{authorization_rule_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the description of the specified namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.EhNamespace{}} on success
  {:error, info} on failure
  """
  @spec namespaces_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.EhNamespace.t} | {:error, Tesla.Env.t}
  def namespaces_get(connection, resource_group_name, namespace_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.EhNamespace{})
  end

  @doc """
  Gets an AuthorizationRule for a Namespace by rule name.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - authorization_rule_name (String.t): The authorization rule name.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.AuthorizationRule{}} on success
  {:error, info} on failure
  """
  @spec namespaces_get_authorization_rule(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.AuthorizationRule.t} | {:error, Tesla.Env.t}
  def namespaces_get_authorization_rule(connection, resource_group_name, namespace_name, authorization_rule_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/AuthorizationRules/#{authorization_rule_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.AuthorizationRule{})
  end

  @doc """
  Gets messaging plan for specified namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.MessagingPlan{}} on success
  {:error, info} on failure
  """
  @spec namespaces_get_messaging_plan(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.MessagingPlan.t} | {:error, Tesla.Env.t}
  def namespaces_get_messaging_plan(connection, resource_group_name, namespace_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/messagingplan")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.MessagingPlan{})
  end

  @doc """
  Lists all the available Namespaces within a subscription, irrespective of the resource groups.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.EhNamespaceListResult{}} on success
  {:error, info} on failure
  """
  @spec namespaces_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.EhNamespaceListResult.t} | {:error, Tesla.Env.t}
  def namespaces_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.EventHub/namespaces")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.EhNamespaceListResult{})
  end

  @doc """
  Gets a list of authorization rules for a Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.AuthorizationRuleListResult{}} on success
  {:error, info} on failure
  """
  @spec namespaces_list_authorization_rules(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.AuthorizationRuleListResult.t} | {:error, Tesla.Env.t}
  def namespaces_list_authorization_rules(connection, resource_group_name, namespace_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/AuthorizationRules")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.AuthorizationRuleListResult{})
  end

  @doc """
  Lists the available Namespaces within a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.EhNamespaceListResult{}} on success
  {:error, info} on failure
  """
  @spec namespaces_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.EhNamespaceListResult.t} | {:error, Tesla.Env.t}
  def namespaces_list_by_resource_group(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.EhNamespaceListResult{})
  end

  @doc """
  Gets the primary and secondary connection strings for the Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - authorization_rule_name (String.t): The authorization rule name.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.AccessKeys{}} on success
  {:error, info} on failure
  """
  @spec namespaces_list_keys(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.AccessKeys.t} | {:error, Tesla.Env.t}
  def namespaces_list_keys(connection, resource_group_name, namespace_name, authorization_rule_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/AuthorizationRules/#{authorization_rule_name}/listKeys")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.AccessKeys{})
  end

  @doc """
  Regenerates the primary or secondary connection strings for the specified Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - authorization_rule_name (String.t): The authorization rule name.
  - parameters (RegenerateAccessKeyParameters): Parameters required to regenerate the connection string.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.AccessKeys{}} on success
  {:error, info} on failure
  """
  @spec namespaces_regenerate_keys(Tesla.Env.client, String.t, String.t, String.t, Microsoft.Azure.Management.EventHub.Model.RegenerateAccessKeyParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.AccessKeys.t} | {:error, Tesla.Env.t}
  def namespaces_regenerate_keys(connection, resource_group_name, namespace_name, authorization_rule_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/AuthorizationRules/#{authorization_rule_name}/regenerateKeys")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.AccessKeys{})
  end

  @doc """
  Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - parameters (EhNamespace): Parameters for updating a namespace resource.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.EhNamespace{}} on success
  {:error, info} on failure
  """
  @spec namespaces_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.EventHub.Model.EhNamespace.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.EhNamespace.t} | {:error, Tesla.Env.t}
  def namespaces_update(connection, resource_group_name, namespace_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.EhNamespace{})
  end
end
