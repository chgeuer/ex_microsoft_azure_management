# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.EventHub.Api.DisasterRecoveryConfigs do
  @moduledoc """
  API calls for all endpoints tagged `DisasterRecoveryConfigs`.
  """

  alias Microsoft.Azure.Management.EventHub.Connection
  import Microsoft.Azure.Management.EventHub.RequestBuilder


  @doc """
  This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - alias (String.t): The Disaster Recovery configuration name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_break_pairing(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_break_pairing(connection, resource_group_name, namespace_name, alias, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/#{alias}/breakPairing")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Check the give Namespace name availability.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - parameters (CheckNameAvailabilityParameter): Parameters to check availability of the given Alias name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.CheckNameAvailabilityResult{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_check_name_availability(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.EventHub.Model.CheckNameAvailabilityParameter.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.CheckNameAvailabilityResult.t} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_check_name_availability(connection, api_version, subscription_id, resource_group_name, namespace_name, parameters, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/CheckNameAvailability")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :body, parameters)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.CheckNameAvailabilityResult{})
  end

  @doc """
  Creates or updates a new Alias(Disaster Recovery configuration)

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - alias (String.t): The Disaster Recovery configuration name
  - parameters (ArmDisasterRecovery): Parameters required to create an Alias(Disaster Recovery configuration)
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecovery{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_create_or_update(Tesla.Env.client, String.t, String.t, String.t, Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecovery.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecovery.t} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_create_or_update(connection, resource_group_name, namespace_name, alias, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/#{alias}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecovery{})
  end

  @doc """
  Deletes an Alias(Disaster Recovery configuration)

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - alias (String.t): The Disaster Recovery configuration name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_delete(connection, resource_group_name, namespace_name, alias, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/#{alias}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  envokes GEO DR failover and reconfigure the alias to point to the secondary namespace

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - alias (String.t): The Disaster Recovery configuration name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_fail_over(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_fail_over(connection, resource_group_name, namespace_name, alias, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/#{alias}/failover")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - alias (String.t): The Disaster Recovery configuration name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecovery{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecovery.t} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_get(connection, resource_group_name, namespace_name, alias, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/#{alias}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecovery{})
  end

  @doc """
  Gets an AuthorizationRule for a Namespace by rule name.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - alias (String.t): The Disaster Recovery configuration name
  - authorization_rule_name (String.t): The authorization rule name.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.AuthorizationRule{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_get_authorization_rule(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.AuthorizationRule.t} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_get_authorization_rule(connection, resource_group_name, namespace_name, alias, authorization_rule_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/#{alias}/AuthorizationRules/#{authorization_rule_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.AuthorizationRule{})
  end

  @doc """
  Gets all Alias(Disaster Recovery configurations)

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecoveryListResult{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecoveryListResult.t} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_list(connection, resource_group_name, namespace_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.ArmDisasterRecoveryListResult{})
  end

  @doc """
  Gets a list of authorization rules for a Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - alias (String.t): The Disaster Recovery configuration name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.AuthorizationRuleListResult{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_list_authorization_rules(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.AuthorizationRuleListResult.t} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_list_authorization_rules(connection, resource_group_name, namespace_name, alias, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/#{alias}/AuthorizationRules")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.AuthorizationRuleListResult{})
  end

  @doc """
  Gets the primary and secondary connection strings for the Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - alias (String.t): The Disaster Recovery configuration name
  - authorization_rule_name (String.t): The authorization rule name.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.AccessKeys{}} on success
  {:error, info} on failure
  """
  @spec disaster_recovery_configs_list_keys(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.AccessKeys.t} | {:error, Tesla.Env.t}
  def disaster_recovery_configs_list_keys(connection, resource_group_name, namespace_name, alias, authorization_rule_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/disasterRecoveryConfigs/#{alias}/AuthorizationRules/#{authorization_rule_name}/listKeys")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.AccessKeys{})
  end
end
