# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.EventHub.Api.ConsumerGroups do
  @moduledoc """
  API calls for all endpoints tagged `ConsumerGroups`.
  """

  alias Microsoft.Azure.Management.EventHub.Connection
  import Microsoft.Azure.Management.EventHub.RequestBuilder


  @doc """
  Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - event_hub_name (String.t): The Event Hub name
  - consumer_group_name (String.t): The consumer group name
  - parameters (ConsumerGroup): Parameters supplied to create or update a consumer group resource.
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.ConsumerGroup{}} on success
  {:error, info} on failure
  """
  @spec consumer_groups_create_or_update(Tesla.Env.client, String.t, String.t, String.t, String.t, Microsoft.Azure.Management.EventHub.Model.ConsumerGroup.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.ConsumerGroup.t} | {:error, Tesla.Env.t}
  def consumer_groups_create_or_update(connection, resource_group_name, namespace_name, event_hub_name, consumer_group_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/eventhubs/#{event_hub_name}/consumergroups/#{consumer_group_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.ConsumerGroup{})
  end

  @doc """
  Deletes a consumer group from the specified Event Hub and resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - event_hub_name (String.t): The Event Hub name
  - consumer_group_name (String.t): The consumer group name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec consumer_groups_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def consumer_groups_delete(connection, resource_group_name, namespace_name, event_hub_name, consumer_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/eventhubs/#{event_hub_name}/consumergroups/#{consumer_group_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a description for the specified consumer group.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - event_hub_name (String.t): The Event Hub name
  - consumer_group_name (String.t): The consumer group name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.ConsumerGroup{}} on success
  {:error, info} on failure
  """
  @spec consumer_groups_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.ConsumerGroup.t} | {:error, Tesla.Env.t}
  def consumer_groups_get(connection, resource_group_name, namespace_name, event_hub_name, consumer_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/eventhubs/#{event_hub_name}/consumergroups/#{consumer_group_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.ConsumerGroup{})
  end

  @doc """
  Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists in the Namespace.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventHub.Connection): Connection to server
  - resource_group_name (String.t): Name of the resource group within the azure subscription.
  - namespace_name (String.t): The Namespace name
  - event_hub_name (String.t): The Event Hub name
  - api_version (String.t): Client API Version.
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters
    - :__skip (integer()): Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls.
    - :__top (integer()): May be used to limit the number of results to the most recent N usageDetails.

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventHub.Model.ConsumerGroupListResult{}} on success
  {:error, info} on failure
  """
  @spec consumer_groups_list_by_event_hub(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventHub.Model.ConsumerGroupListResult.t} | {:error, Tesla.Env.t}
  def consumer_groups_list_by_event_hub(connection, resource_group_name, namespace_name, event_hub_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$skip" => :query,
      :"$top" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventHub/namespaces/#{namespace_name}/eventhubs/#{event_hub_name}/consumergroups")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventHub.Model.ConsumerGroupListResult{})
  end
end
