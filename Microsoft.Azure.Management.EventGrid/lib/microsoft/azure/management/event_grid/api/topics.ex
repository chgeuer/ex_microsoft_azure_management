# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.EventGrid.Api.Topics do
  @moduledoc """
  API calls for all endpoints tagged `Topics`.
  """

  alias Microsoft.Azure.Management.EventGrid.Connection
  import Microsoft.Azure.Management.EventGrid.RequestBuilder


  @doc """
  Create a topic
  Asynchronously creates a new topic with the specified parameters.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription.
  - topic_name (String.t): Name of the topic
  - topic_info (Topic): Topic information
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventGrid.Model.Topic{}} on success
  {:error, info} on failure
  """
  @spec topics_create_or_update(Tesla.Env.client, String.t, String.t, String.t, Microsoft.Azure.Management.EventGrid.Model.Topic.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventGrid.Model.Topic.t} | {:error, Tesla.Env.t}
  def topics_create_or_update(connection, subscription_id, resource_group_name, topic_name, topic_info, api_version, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventGrid/topics/#{topic_name}")
    |> add_param(:body, :body, topic_info)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventGrid.Model.Topic{})
  end

  @doc """
  Delete a topic
  Delete existing topic

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription.
  - topic_name (String.t): Name of the topic
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec topics_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def topics_delete(connection, subscription_id, resource_group_name, topic_name, api_version, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventGrid/topics/#{topic_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a topic
  Get properties of a topic

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription.
  - topic_name (String.t): Name of the topic
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventGrid.Model.Topic{}} on success
  {:error, info} on failure
  """
  @spec topics_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventGrid.Model.Topic.t} | {:error, Tesla.Env.t}
  def topics_get(connection, subscription_id, resource_group_name, topic_name, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventGrid/topics/#{topic_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventGrid.Model.Topic{})
  end

  @doc """
  List topics under a resource group
  List all the topics under a resource group

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription.
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventGrid.Model.TopicsListResult{}} on success
  {:error, info} on failure
  """
  @spec topics_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventGrid.Model.TopicsListResult.t} | {:error, Tesla.Env.t}
  def topics_list_by_resource_group(connection, subscription_id, resource_group_name, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventGrid/topics")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventGrid.Model.TopicsListResult{})
  end

  @doc """
  List topics under an Azure subscription
  List all the topics under an Azure subscription

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventGrid.Model.TopicsListResult{}} on success
  {:error, info} on failure
  """
  @spec topics_list_by_subscription(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventGrid.Model.TopicsListResult.t} | {:error, Tesla.Env.t}
  def topics_list_by_subscription(connection, subscription_id, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.EventGrid/topics")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventGrid.Model.TopicsListResult{})
  end

  @doc """
  List topic event types
  List event types for a topic

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription.
  - provider_namespace (String.t): Namespace of the provider of the topic
  - resource_type_name (String.t): Name of the topic type
  - resource_name (String.t): Name of the topic
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventGrid.Model.EventTypesListResult{}} on success
  {:error, info} on failure
  """
  @spec topics_list_event_types(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventGrid.Model.EventTypesListResult.t} | {:error, Tesla.Env.t}
  def topics_list_event_types(connection, subscription_id, resource_group_name, provider_namespace, resource_type_name, resource_name, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/#{provider_namespace}/#{resource_type_name}/#{resource_name}/providers/Microsoft.EventGrid/eventTypes")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventGrid.Model.EventTypesListResult{})
  end

  @doc """
  List keys for a topic
  List the two keys used to publish to a topic

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription.
  - topic_name (String.t): Name of the topic
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventGrid.Model.TopicSharedAccessKeys{}} on success
  {:error, info} on failure
  """
  @spec topics_list_shared_access_keys(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventGrid.Model.TopicSharedAccessKeys.t} | {:error, Tesla.Env.t}
  def topics_list_shared_access_keys(connection, subscription_id, resource_group_name, topic_name, api_version, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventGrid/topics/#{topic_name}/listKeys")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventGrid.Model.TopicSharedAccessKeys{})
  end

  @doc """
  Regenerate key for a topic
  Regenerate a shared access key for a topic

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription.
  - topic_name (String.t): Name of the topic
  - regenerate_key_request (TopicRegenerateKeyRequest): Request body to regenerate key
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventGrid.Model.TopicSharedAccessKeys{}} on success
  {:error, info} on failure
  """
  @spec topics_regenerate_key(Tesla.Env.client, String.t, String.t, String.t, Microsoft.Azure.Management.EventGrid.Model.TopicRegenerateKeyRequest.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventGrid.Model.TopicSharedAccessKeys.t} | {:error, Tesla.Env.t}
  def topics_regenerate_key(connection, subscription_id, resource_group_name, topic_name, regenerate_key_request, api_version, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventGrid/topics/#{topic_name}/regenerateKey")
    |> add_param(:body, :body, regenerate_key_request)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventGrid.Model.TopicSharedAccessKeys{})
  end

  @doc """
  Update a topic
  Asynchronously updates a topic with the specified parameters.

  ## Parameters

  - connection (Microsoft.Azure.Management.EventGrid.Connection): Connection to server
  - subscription_id (String.t): Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription.
  - topic_name (String.t): Name of the topic
  - topic_update_parameters (TopicUpdateParameters): Topic update information
  - api_version (String.t): Version of the API to be used with the client request.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.EventGrid.Model.Topic{}} on success
  {:error, info} on failure
  """
  @spec topics_update(Tesla.Env.client, String.t, String.t, String.t, Microsoft.Azure.Management.EventGrid.Model.TopicUpdateParameters.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.EventGrid.Model.Topic.t} | {:error, Tesla.Env.t}
  def topics_update(connection, subscription_id, resource_group_name, topic_name, topic_update_parameters, api_version, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.EventGrid/topics/#{topic_name}")
    |> add_param(:body, :body, topic_update_parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.EventGrid.Model.Topic{})
  end
end
