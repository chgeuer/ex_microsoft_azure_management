# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Authorization.Api.Permissions do
  @moduledoc """
  API calls for all endpoints tagged `Permissions`.
  """

  alias Microsoft.Azure.Management.Authorization.Connection
  import Microsoft.Azure.Management.Authorization.RequestBuilder


  @doc """
  Gets all permissions the caller has for a resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group containing the resource. The name is case insensitive.
  - resource_provider_namespace (String.t): The namespace of the resource provider.
  - parent_resource_path (String.t): The parent resource identity.
  - resource_type (String.t): The resource type of the resource.
  - resource_name (String.t): The name of the resource to get the permissions for.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PermissionGetResult{}} on success
  {:error, info} on failure
  """
  @spec permissions_list_for_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PermissionGetResult.t} | {:error, Tesla.Env.t}
  def permissions_list_for_resource(connection, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/providers/#{resource_provider_namespace}/#{parent_resource_path}/#{resource_type}/#{resource_name}/providers/Microsoft.Authorization/permissions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PermissionGetResult{})
  end

  @doc """
  Gets all permissions the caller has for a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Authorization.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group to get the permissions for. The name is case insensitive.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Authorization.Model.PermissionGetResult{}} on success
  {:error, info} on failure
  """
  @spec permissions_list_for_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Authorization.Model.PermissionGetResult.t} | {:error, Tesla.Env.t}
  def permissions_list_for_resource_group(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/providers/Microsoft.Authorization/permissions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Authorization.Model.PermissionGetResult{})
  end
end
