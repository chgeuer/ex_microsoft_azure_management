# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Network.Api.Zones do
  @moduledoc """
  API calls for all endpoints tagged `Zones`.
  """

  alias Microsoft.Azure.Management.Network.Connection
  import Microsoft.Azure.Management.Network.RequestBuilder


  @doc """
  Creates or updates a DNS zone. Does not modify DNS records within the zone.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - zone_name (String.t): The name of the DNS zone (without a terminating dot).
  - parameters (Zone): Parameters supplied to the CreateOrUpdate operation.
  - api_version (String.t): Specifies the API version.
  - subscription_id (String.t): Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :if_match (String.t): The etag of the DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen etag value to prevent accidentally overwritting any concurrent changes.
    - :if_none_match (String.t): Set to &#39;*&#39; to allow a new DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.Zone{}} on success
  {:error, info} on failure
  """
  @spec zones_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.Zone.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.Zone.t} | {:error, Tesla.Env.t}
  def zones_create_or_update(connection, resource_group_name, zone_name, parameters, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"If-None-Match" => :headers
    }
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/dnsZones/#{zone_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.Zone{})
  end

  @doc """
  Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot be undone.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - zone_name (String.t): The name of the DNS zone (without a terminating dot).
  - api_version (String.t): Specifies the API version.
  - subscription_id (String.t): Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :if_match (String.t): The etag of the DNS zone. Omit this value to always delete the current zone. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec zones_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def zones_delete(connection, resource_group_name, zone_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/dnsZones/#{zone_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - zone_name (String.t): The name of the DNS zone (without a terminating dot).
  - api_version (String.t): Specifies the API version.
  - subscription_id (String.t): Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.Zone{}} on success
  {:error, info} on failure
  """
  @spec zones_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.Zone.t} | {:error, Tesla.Env.t}
  def zones_get(connection, resource_group_name, zone_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/dnsZones/#{zone_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.Zone{})
  end

  @doc """
  Lists the DNS zones in all resource groups in a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - api_version (String.t): Specifies the API version.
  - subscription_id (String.t): Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__top (integer()): The maximum number of DNS zones to return. If not specified, returns up to 100 zones.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.ZoneListResult{}} on success
  {:error, info} on failure
  """
  @spec zones_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.ZoneListResult.t} | {:error, Tesla.Env.t}
  def zones_list(connection, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Network/dnszones")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.ZoneListResult{})
  end

  @doc """
  Lists the DNS zones within a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - api_version (String.t): Specifies the API version.
  - subscription_id (String.t): Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__top (integer()): The maximum number of record sets to return. If not specified, returns up to 100 record sets.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.ZoneListResult{}} on success
  {:error, info} on failure
  """
  @spec zones_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.ZoneListResult.t} | {:error, Tesla.Env.t}
  def zones_list_by_resource_group(connection, resource_group_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/dnsZones")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.ZoneListResult{})
  end

  @doc """
  Updates a DNS zone. Does not modify DNS records within the zone.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - zone_name (String.t): The name of the DNS zone (without a terminating dot).
  - parameters (ZoneUpdate): Parameters supplied to the Update operation.
  - api_version (String.t): Specifies the API version.
  - subscription_id (String.t): Specifies the Azure subscription ID, which uniquely identifies the Microsoft Azure subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :if_match (String.t): The etag of the DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen etag value to prevent accidentally overwritting any concurrent changes.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.Zone{}} on success
  {:error, info} on failure
  """
  @spec zones_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.ZoneUpdate.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.Zone.t} | {:error, Tesla.Env.t}
  def zones_update(connection, resource_group_name, zone_name, parameters, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/dnsZones/#{zone_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.Zone{})
  end
end
