# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Network.Api.HeatMaps do
  @moduledoc """
  API calls for all endpoints tagged `HeatMaps`.
  """

  alias Microsoft.Azure.Management.Network.Connection
  import Microsoft.Azure.Management.Network.RequestBuilder


  @doc """
  Gets latest heatmap for Traffic Manager profile.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - subscription_id (String.t): Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - resource_group_name (String.t): The name of the resource group containing the Traffic Manager endpoint.
  - profile_name (String.t): The name of the Traffic Manager profile.
  - heat_map_type (String.t): The type of HeatMap for the Traffic Manager profile.
  - api_version (String.t): Client Api Version.
  - opts (KeywordList): [optional] Optional parameters
    - :top_left ([float()]): The top left latitude,longitude pair of the rectangular viewport to query for.
    - :bot_right ([float()]): The bottom right latitude,longitude pair of the rectangular viewport to query for.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.HeatMapModel{}} on success
  {:error, info} on failure
  """
  @spec heat_map_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.HeatMapModel.t} | {:error, Tesla.Env.t}
  def heat_map_get(connection, subscription_id, resource_group_name, profile_name, heat_map_type, api_version, opts \\ []) do
    optional_params = %{
      :"topLeft" => :query,
      :"botRight" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/trafficmanagerprofiles/#{profile_name}/heatMaps/#{heat_map_type}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.HeatMapModel{})
  end
end
