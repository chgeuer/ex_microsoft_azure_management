# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Network.Api.LoadBalancers do
  @moduledoc """
  API calls for all endpoints tagged `LoadBalancers`.
  """

  alias Microsoft.Azure.Management.Network.Connection
  import Microsoft.Azure.Management.Network.RequestBuilder


  @doc """
  Creates or updates a load balancer inbound nat rule.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - inbound_nat_rule_name (String.t): The name of the inbound nat rule.
  - inbound_nat_rule_parameters (InboundNatRule): Parameters supplied to the create or update inbound nat rule operation.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.InboundNatRule{}} on success
  {:error, info} on failure
  """
  @spec inbound_nat_rules_create_or_update(Tesla.Env.client, String.t, String.t, String.t, Microsoft.Azure.Management.Network.Model.InboundNatRule.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.InboundNatRule.t} | {:error, Tesla.Env.t}
  def inbound_nat_rules_create_or_update(connection, resource_group_name, load_balancer_name, inbound_nat_rule_name, inbound_nat_rule_parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/inboundNatRules/#{inbound_nat_rule_name}")
    |> add_param(:body, :"inboundNatRuleParameters", inbound_nat_rule_parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.InboundNatRule{})
  end

  @doc """
  Deletes the specified load balancer inbound nat rule.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - inbound_nat_rule_name (String.t): The name of the inbound nat rule.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec inbound_nat_rules_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def inbound_nat_rules_delete(connection, resource_group_name, load_balancer_name, inbound_nat_rule_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/inboundNatRules/#{inbound_nat_rule_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the specified load balancer inbound nat rule.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - inbound_nat_rule_name (String.t): The name of the inbound nat rule.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters
    - :__expand (String.t): Expands referenced resources.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.InboundNatRule{}} on success
  {:error, info} on failure
  """
  @spec inbound_nat_rules_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.InboundNatRule.t} | {:error, Tesla.Env.t}
  def inbound_nat_rules_get(connection, resource_group_name, load_balancer_name, inbound_nat_rule_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$expand" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/inboundNatRules/#{inbound_nat_rule_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.InboundNatRule{})
  end

  @doc """
  Gets all the inbound nat rules in a load balancer.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.InboundNatRuleListResult{}} on success
  {:error, info} on failure
  """
  @spec inbound_nat_rules_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.InboundNatRuleListResult.t} | {:error, Tesla.Env.t}
  def inbound_nat_rules_list(connection, resource_group_name, load_balancer_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/inboundNatRules")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.InboundNatRuleListResult{})
  end

  @doc """
  Gets load balancer backend address pool.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - backend_address_pool_name (String.t): The name of the backend address pool.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.BackendAddressPool{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_backend_address_pools_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.BackendAddressPool.t} | {:error, Tesla.Env.t}
  def load_balancer_backend_address_pools_get(connection, resource_group_name, load_balancer_name, backend_address_pool_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/backendAddressPools/#{backend_address_pool_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.BackendAddressPool{})
  end

  @doc """
  Gets all the load balancer backed address pools.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancerBackendAddressPoolListResult{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_backend_address_pools_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancerBackendAddressPoolListResult.t} | {:error, Tesla.Env.t}
  def load_balancer_backend_address_pools_list(connection, resource_group_name, load_balancer_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/backendAddressPools")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancerBackendAddressPoolListResult{})
  end

  @doc """
  Gets load balancer frontend IP configuration.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - frontend_ip_configuration_name (String.t): The name of the frontend IP configuration.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.FrontendIpConfiguration{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_frontend_ip_configurations_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.FrontendIpConfiguration.t} | {:error, Tesla.Env.t}
  def load_balancer_frontend_ip_configurations_get(connection, resource_group_name, load_balancer_name, frontend_ip_configuration_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/frontendIPConfigurations/#{frontend_ip_configuration_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.FrontendIpConfiguration{})
  end

  @doc """
  Gets all the load balancer frontend IP configurations.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancerFrontendIpConfigurationListResult{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_frontend_ip_configurations_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancerFrontendIpConfigurationListResult.t} | {:error, Tesla.Env.t}
  def load_balancer_frontend_ip_configurations_list(connection, resource_group_name, load_balancer_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/frontendIPConfigurations")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancerFrontendIpConfigurationListResult{})
  end

  @doc """
  Gets the specified load balancer load balancing rule.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - load_balancing_rule_name (String.t): The name of the load balancing rule.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancingRule{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_load_balancing_rules_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancingRule.t} | {:error, Tesla.Env.t}
  def load_balancer_load_balancing_rules_get(connection, resource_group_name, load_balancer_name, load_balancing_rule_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/loadBalancingRules/#{load_balancing_rule_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancingRule{})
  end

  @doc """
  Gets all the load balancing rules in a load balancer.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancerLoadBalancingRuleListResult{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_load_balancing_rules_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancerLoadBalancingRuleListResult.t} | {:error, Tesla.Env.t}
  def load_balancer_load_balancing_rules_list(connection, resource_group_name, load_balancer_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/loadBalancingRules")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancerLoadBalancingRuleListResult{})
  end

  @doc """
  Gets associated load balancer network interfaces.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.NetworkInterfaceListResult{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_network_interfaces_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.NetworkInterfaceListResult.t} | {:error, Tesla.Env.t}
  def load_balancer_network_interfaces_list(connection, resource_group_name, load_balancer_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/networkInterfaces")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.NetworkInterfaceListResult{})
  end

  @doc """
  Gets load balancer probe.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - probe_name (String.t): The name of the probe.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.Probe{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_probes_get(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.Probe.t} | {:error, Tesla.Env.t}
  def load_balancer_probes_get(connection, resource_group_name, load_balancer_name, probe_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/probes/#{probe_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.Probe{})
  end

  @doc """
  Gets all the load balancer probes.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancerProbeListResult{}} on success
  {:error, info} on failure
  """
  @spec load_balancer_probes_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancerProbeListResult.t} | {:error, Tesla.Env.t}
  def load_balancer_probes_list(connection, resource_group_name, load_balancer_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}/probes")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancerProbeListResult{})
  end

  @doc """
  Creates or updates a load balancer.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - parameters (LoadBalancer): Parameters supplied to the create or update load balancer operation.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancer{}} on success
  {:error, info} on failure
  """
  @spec load_balancers_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.LoadBalancer.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancer.t} | {:error, Tesla.Env.t}
  def load_balancers_create_or_update(connection, resource_group_name, load_balancer_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancer{})
  end

  @doc """
  Deletes the specified load balancer.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec load_balancers_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def load_balancers_delete(connection, resource_group_name, load_balancer_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the specified load balancer.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters
    - :__expand (String.t): Expands referenced resources.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancer{}} on success
  {:error, info} on failure
  """
  @spec load_balancers_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancer.t} | {:error, Tesla.Env.t}
  def load_balancers_get(connection, resource_group_name, load_balancer_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$expand" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancer{})
  end

  @doc """
  Gets all the load balancers in a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancerListResult{}} on success
  {:error, info} on failure
  """
  @spec load_balancers_list(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancerListResult.t} | {:error, Tesla.Env.t}
  def load_balancers_list(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancerListResult{})
  end

  @doc """
  Gets all the load balancers in a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancerListResult{}} on success
  {:error, info} on failure
  """
  @spec load_balancers_list_all(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancerListResult.t} | {:error, Tesla.Env.t}
  def load_balancers_list_all(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Network/loadBalancers")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancerListResult{})
  end

  @doc """
  Updates a load balancer tags.

  ## Parameters

  - connection (Microsoft.Azure.Management.Network.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - load_balancer_name (String.t): The name of the load balancer.
  - parameters (TagsObject): Parameters supplied to update load balancer tags.
  - api_version (String.t): Client API version.
  - subscription_id (String.t): The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Network.Model.LoadBalancer{}} on success
  {:error, info} on failure
  """
  @spec load_balancers_update_tags(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Network.Model.TagsObject.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Network.Model.LoadBalancer.t} | {:error, Tesla.Env.t}
  def load_balancers_update_tags(connection, resource_group_name, load_balancer_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Network/loadBalancers/#{load_balancer_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Network.Model.LoadBalancer{})
  end
end
