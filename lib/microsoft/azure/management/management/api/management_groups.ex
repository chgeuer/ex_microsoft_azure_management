# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Management.Api.ManagementGroups do
  @moduledoc """
  API calls for all endpoints tagged `ManagementGroups`.
  """

  alias Microsoft.Azure.Management.Management.Connection
  import Microsoft.Azure.Management.Management.RequestBuilder


  @doc """
  Associates existing subscription with the management group. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Management.Connection): Connection to server
  - group_id (String.t): Management Group ID.
  - subscription_id (String.t): Subscription ID.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2018-01-01-preview.
  - opts (KeywordList): [optional] Optional parameters
    - :cache_control (String.t): Indicates that the request shouldn&#39;t utilize any caches.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec management_group_subscriptions_create(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def management_group_subscriptions_create(connection, group_id, subscription_id, api_version, opts \\ []) do
    optional_params = %{
      :"Cache-Control" => :headers
    }
    %{}
    |> method(:put)
    |> url("/providers/Microsoft.Management/managementGroups/#{group_id}/subscriptions/#{subscription_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  De-associates subscription from the management group. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Management.Connection): Connection to server
  - group_id (String.t): Management Group ID.
  - subscription_id (String.t): Subscription ID.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2018-01-01-preview.
  - opts (KeywordList): [optional] Optional parameters
    - :cache_control (String.t): Indicates that the request shouldn&#39;t utilize any caches.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec management_group_subscriptions_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def management_group_subscriptions_delete(connection, group_id, subscription_id, api_version, opts \\ []) do
    optional_params = %{
      :"Cache-Control" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/providers/Microsoft.Management/managementGroups/#{group_id}/subscriptions/#{subscription_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Create or update a management group. If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Management.Connection): Connection to server
  - group_id (String.t): Management Group ID.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2018-01-01-preview.
  - create_management_group_request (CreateManagementGroupRequest): Management group creation parameters.
  - opts (KeywordList): [optional] Optional parameters
    - :cache_control (String.t): Indicates that the request shouldn&#39;t utilize any caches.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Management.Model.ManagementGroup{}} on success
  {:error, info} on failure
  """
  @spec management_groups_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Management.Model.CreateManagementGroupRequest.t, keyword()) :: {:ok, Microsoft.Azure.Management.Management.Model.ManagementGroup.t} | {:error, Tesla.Env.t}
  def management_groups_create_or_update(connection, group_id, api_version, create_management_group_request, opts \\ []) do
    optional_params = %{
      :"Cache-Control" => :headers
    }
    %{}
    |> method(:put)
    |> url("/providers/Microsoft.Management/managementGroups/#{group_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :"createManagementGroupRequest", create_management_group_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Management.Model.ManagementGroup{})
  end

  @doc """
  Delete management group. If a management group contains child resources, the request will fail. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Management.Connection): Connection to server
  - group_id (String.t): Management Group ID.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2018-01-01-preview.
  - opts (KeywordList): [optional] Optional parameters
    - :cache_control (String.t): Indicates that the request shouldn&#39;t utilize any caches.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Management.Model.OperationResults{}} on success
  {:error, info} on failure
  """
  @spec management_groups_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Management.Model.OperationResults.t} | {:error, Tesla.Env.t}
  def management_groups_delete(connection, group_id, api_version, opts \\ []) do
    optional_params = %{
      :"Cache-Control" => :headers
    }
    %{}
    |> method(:delete)
    |> url("/providers/Microsoft.Management/managementGroups/#{group_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Management.Model.OperationResults{})
  end

  @doc """
  Get the details of the management group. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Management.Connection): Connection to server
  - group_id (String.t): Management Group ID.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2018-01-01-preview.
  - opts (KeywordList): [optional] Optional parameters
    - :__expand (String.t): The $expand&#x3D;children query string parameter allows clients to request inclusion of children in the response payload.
    - :__recurse (boolean()): The $recurse&#x3D;true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand&#x3D;children must be passed up if $recurse is set to true.
    - :__filter (String.t): A filter which allows the exclusion of subscriptions from results (i.e. &#39;$filter&#x3D;children.childType ne Subscription&#39;)
    - :cache_control (String.t): Indicates that the request shouldn&#39;t utilize any caches.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Management.Model.ManagementGroup{}} on success
  {:error, info} on failure
  """
  @spec management_groups_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Management.Model.ManagementGroup.t} | {:error, Tesla.Env.t}
  def management_groups_get(connection, group_id, api_version, opts \\ []) do
    optional_params = %{
      :"$expand" => :query,
      :"$recurse" => :query,
      :"$filter" => :query,
      :"Cache-Control" => :headers
    }
    %{}
    |> method(:get)
    |> url("/providers/Microsoft.Management/managementGroups/#{group_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Management.Model.ManagementGroup{})
  end

  @doc """
  List management groups for the authenticated user. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Management.Connection): Connection to server
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2018-01-01-preview.
  - opts (KeywordList): [optional] Optional parameters
    - :cache_control (String.t): Indicates that the request shouldn&#39;t utilize any caches.
    - :__skiptoken (String.t): Page continuation token is only used if a previous operation returned a partial result.  If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls. 

  ## Returns

  {:ok, %Microsoft.Azure.Management.Management.Model.ManagementGroupListResult{}} on success
  {:error, info} on failure
  """
  @spec management_groups_list(Tesla.Env.client, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Management.Model.ManagementGroupListResult.t} | {:error, Tesla.Env.t}
  def management_groups_list(connection, api_version, opts \\ []) do
    optional_params = %{
      :"Cache-Control" => :headers,
      :"$skiptoken" => :query
    }
    %{}
    |> method(:get)
    |> url("/providers/Microsoft.Management/managementGroups")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Management.Model.ManagementGroupListResult{})
  end

  @doc """
  Update a management group. 

  ## Parameters

  - connection (Microsoft.Azure.Management.Management.Connection): Connection to server
  - group_id (String.t): Management Group ID.
  - api_version (String.t): Version of the API to be used with the client request. The current version is 2018-01-01-preview.
  - patch_group_request (PatchManagementGroupRequest): Management group patch parameters.
  - opts (KeywordList): [optional] Optional parameters
    - :cache_control (String.t): Indicates that the request shouldn&#39;t utilize any caches.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Management.Model.ManagementGroup{}} on success
  {:error, info} on failure
  """
  @spec management_groups_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Management.Model.PatchManagementGroupRequest.t, keyword()) :: {:ok, Microsoft.Azure.Management.Management.Model.ManagementGroup.t} | {:error, Tesla.Env.t}
  def management_groups_update(connection, group_id, api_version, patch_group_request, opts \\ []) do
    optional_params = %{
      :"Cache-Control" => :headers
    }
    %{}
    |> method(:patch)
    |> url("/providers/Microsoft.Management/managementGroups/#{group_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_param(:body, :"patchGroupRequest", patch_group_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Management.Model.ManagementGroup{})
  end
end
