# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Solutions.Api.ApplicationDefinitions do
  @moduledoc """
  API calls for all endpoints tagged `ApplicationDefinitions`.
  """

  alias Microsoft.Azure.Management.Solutions.Connection
  import Microsoft.Azure.Management.Solutions.RequestBuilder


  @doc """
  Creates a new managed application definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - application_definition_name (String.t): The name of the managed application definition.
  - parameters (ApplicationDefinition): Parameters supplied to the create or update an managed application definition.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition{}} on success
  {:error, info} on failure
  """
  @spec application_definitions_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition.t} | {:error, Tesla.Env.t}
  def application_definitions_create_or_update(connection, resource_group_name, application_definition_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applicationDefinitions/#{application_definition_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition{})
  end

  @doc """
  Creates a new managed application definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - application_definition_id (String.t): The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}
  - parameters (ApplicationDefinition): Parameters supplied to the create or update a managed application definition.
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition{}} on success
  {:error, info} on failure
  """
  @spec application_definitions_create_or_update_by_id(Tesla.Env.client, String.t, Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition.t} | {:error, Tesla.Env.t}
  def application_definitions_create_or_update_by_id(connection, application_definition_id, parameters, api_version, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{application_definition_id}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition{})
  end

  @doc """
  Deletes the managed application definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - application_definition_name (String.t): The name of the managed application definition to delete.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec application_definitions_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def application_definitions_delete(connection, resource_group_name, application_definition_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applicationDefinitions/#{application_definition_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes the managed application definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - application_definition_id (String.t): The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec application_definitions_delete_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def application_definitions_delete_by_id(connection, application_definition_id, api_version, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{application_definition_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the managed application definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - application_definition_name (String.t): The name of the managed application definition.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition{}} on success
  {:error, info} on failure
  """
  @spec application_definitions_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition.t} | {:error, Tesla.Env.t}
  def application_definitions_get(connection, resource_group_name, application_definition_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applicationDefinitions/#{application_definition_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition{})
  end

  @doc """
  Gets the managed application definition.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - application_definition_id (String.t): The fully qualified ID of the managed application definition, including the managed application name and the managed application definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applicationDefinitions/{applicationDefinition-name}
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition{}} on success
  {:error, info} on failure
  """
  @spec application_definitions_get_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition.t} | {:error, Tesla.Env.t}
  def application_definitions_get_by_id(connection, application_definition_id, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{application_definition_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.ApplicationDefinition{})
  end

  @doc """
  Lists the managed application definitions in a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.ApplicationDefinitionListResult{}} on success
  {:error, info} on failure
  """
  @spec application_definitions_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.ApplicationDefinitionListResult.t} | {:error, Tesla.Env.t}
  def application_definitions_list_by_resource_group(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applicationDefinitions")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.ApplicationDefinitionListResult{})
  end
end
