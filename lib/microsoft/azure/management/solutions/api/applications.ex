# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Solutions.Api.Applications do
  @moduledoc """
  API calls for all endpoints tagged `Applications`.
  """

  alias Microsoft.Azure.Management.Solutions.Connection
  import Microsoft.Azure.Management.Solutions.RequestBuilder


  @doc """
  Creates a new managed application.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - application_name (String.t): The name of the managed application.
  - parameters (Application): Parameters supplied to the create or update a managed application.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.Application{}} on success
  {:error, info} on failure
  """
  @spec applications_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Solutions.Model.Application.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.Application.t} | {:error, Tesla.Env.t}
  def applications_create_or_update(connection, resource_group_name, application_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applications/#{application_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.Application{})
  end

  @doc """
  Creates a new managed application.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - application_id (String.t): The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
  - parameters (Application): Parameters supplied to the create or update a managed application.
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.Application{}} on success
  {:error, info} on failure
  """
  @spec applications_create_or_update_by_id(Tesla.Env.client, String.t, Microsoft.Azure.Management.Solutions.Model.Application.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.Application.t} | {:error, Tesla.Env.t}
  def applications_create_or_update_by_id(connection, application_id, parameters, api_version, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/#{application_id}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.Application{})
  end

  @doc """
  Deletes the managed application.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - application_name (String.t): The name of the managed application.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec applications_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def applications_delete(connection, resource_group_name, application_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applications/#{application_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes the managed application.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - application_id (String.t): The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec applications_delete_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def applications_delete_by_id(connection, application_id, api_version, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/#{application_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the managed application.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - application_name (String.t): The name of the managed application.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.Application{}} on success
  {:error, info} on failure
  """
  @spec applications_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.Application.t} | {:error, Tesla.Env.t}
  def applications_get(connection, resource_group_name, application_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applications/#{application_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.Application{})
  end

  @doc """
  Gets the managed application.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - application_id (String.t): The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.Application{}} on success
  {:error, info} on failure
  """
  @spec applications_get_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.Application.t} | {:error, Tesla.Env.t}
  def applications_get_by_id(connection, application_id, api_version, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/#{application_id}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.Application{})
  end

  @doc """
  Gets all the applications within a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.ApplicationListResult{}} on success
  {:error, info} on failure
  """
  @spec applications_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.ApplicationListResult.t} | {:error, Tesla.Env.t}
  def applications_list_by_resource_group(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applications")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.ApplicationListResult{})
  end

  @doc """
  Gets all the applications within a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.ApplicationListResult{}} on success
  {:error, info} on failure
  """
  @spec applications_list_by_subscription(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.ApplicationListResult.t} | {:error, Tesla.Env.t}
  def applications_list_by_subscription(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Solutions/applications")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.ApplicationListResult{})
  end

  @doc """
  Updates an existing managed application. The only value that can be updated via PATCH currently is the tags.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group. The name is case insensitive.
  - application_name (String.t): The name of the managed application.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :parameters (Application): Parameters supplied to update an existing managed application.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.Application{}} on success
  {:error, info} on failure
  """
  @spec applications_update(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.Application.t} | {:error, Tesla.Env.t}
  def applications_update(connection, resource_group_name, application_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"parameters" => :body
    }
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Solutions/applications/#{application_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.Application{})
  end

  @doc """
  Updates an existing managed application. The only value that can be updated via PATCH currently is the tags.

  ## Parameters

  - connection (Microsoft.Azure.Management.Solutions.Connection): Connection to server
  - application_id (String.t): The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
  - api_version (String.t): The API version to use for this operation.
  - opts (KeywordList): [optional] Optional parameters
    - :parameters (Application): Parameters supplied to update an existing managed application.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Solutions.Model.Application{}} on success
  {:error, info} on failure
  """
  @spec applications_update_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Solutions.Model.Application.t} | {:error, Tesla.Env.t}
  def applications_update_by_id(connection, application_id, api_version, opts \\ []) do
    optional_params = %{
      :"parameters" => :body
    }
    %{}
    |> method(:patch)
    |> url("/#{application_id}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Solutions.Model.Application{})
  end
end
