# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Resources.Api.Tags do
  @moduledoc """
  API calls for all endpoints tagged `Tags`.
  """

  alias Microsoft.Azure.Management.Resources.Connection
  import Microsoft.Azure.Management.Resources.RequestBuilder


  @doc """
  Creates a tag in the subscription.
  The tag name can have a maximum of 512 characters and is case insensitive. Tag names created by Azure have prefixes of microsoft, azure, or windows. You cannot create tags with one of these prefixes.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - tag_name (String.t): The name of the tag to create.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.TagDetails{}} on success
  {:error, info} on failure
  """
  @spec tags_create_or_update(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.TagDetails.t} | {:error, Tesla.Env.t}
  def tags_create_or_update(connection, tag_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/tagNames/#{tag_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.TagDetails{})
  end

  @doc """
  Creates a tag value. The name of the tag must already exist.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - tag_name (String.t): The name of the tag.
  - tag_value (String.t): The value of the tag to create.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.TagValue{}} on success
  {:error, info} on failure
  """
  @spec tags_create_or_update_value(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.TagValue.t} | {:error, Tesla.Env.t}
  def tags_create_or_update_value(connection, tag_name, tag_value, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/tagNames/#{tag_name}/tagValues/#{tag_value}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.TagValue{})
  end

  @doc """
  Deletes a tag from the subscription.
  You must remove all values from a resource tag before you can delete it.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - tag_name (String.t): The name of the tag.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec tags_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def tags_delete(connection, tag_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/tagNames/#{tag_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes a tag value.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - tag_name (String.t): The name of the tag.
  - tag_value (String.t): The value of the tag to delete.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec tags_delete_value(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def tags_delete_value(connection, tag_name, tag_value, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/tagNames/#{tag_name}/tagValues/#{tag_value}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the names and values of all resource tags that are defined in a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.TagsListResult{}} on success
  {:error, info} on failure
  """
  @spec tags_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.TagsListResult.t} | {:error, Tesla.Env.t}
  def tags_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/tagNames")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.TagsListResult{})
  end
end
