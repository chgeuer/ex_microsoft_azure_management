# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Resources.Api.ResourceGroups do
  @moduledoc """
  API calls for all endpoints tagged `ResourceGroups`.
  """

  alias Microsoft.Azure.Management.Resources.Connection
  import Microsoft.Azure.Management.Resources.RequestBuilder


  @doc """
  Checks whether a resource group exists.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group to check. The name is case insensitive.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec resource_groups_check_existence(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def resource_groups_check_existence(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:head)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Creates or updates a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group to create or update.
  - parameters (ResourceGroup): Parameters supplied to the create or update a resource group.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.ResourceGroup{}} on success
  {:error, info} on failure
  """
  @spec resource_groups_create_or_update(Tesla.Env.client, String.t, Microsoft.Azure.Management.Resources.Model.ResourceGroup.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.ResourceGroup.t} | {:error, Tesla.Env.t}
  def resource_groups_create_or_update(connection, resource_group_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.ResourceGroup{})
  end

  @doc """
  Deletes a resource group.
  When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group to delete. The name is case insensitive.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec resource_groups_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def resource_groups_delete(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Captures the specified resource group as a template.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group to export as a template.
  - parameters (ExportTemplateRequest): Parameters for exporting the template.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.ResourceGroupExportResult{}} on success
  {:error, info} on failure
  """
  @spec resource_groups_export_template(Tesla.Env.client, String.t, Microsoft.Azure.Management.Resources.Model.ExportTemplateRequest.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.ResourceGroupExportResult.t} | {:error, Tesla.Env.t}
  def resource_groups_export_template(connection, resource_group_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}/exportTemplate")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.ResourceGroupExportResult{})
  end

  @doc """
  Gets a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group to get. The name is case insensitive.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.ResourceGroup{}} on success
  {:error, info} on failure
  """
  @spec resource_groups_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.ResourceGroup.t} | {:error, Tesla.Env.t}
  def resource_groups_get(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.ResourceGroup{})
  end

  @doc """
  Gets all the resource groups for a subscription.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): The filter to apply on the operation.
    - :__top (integer()): The number of results to return. If null is passed, returns all resource groups.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.ResourceGroupListResult{}} on success
  {:error, info} on failure
  """
  @spec resource_groups_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.ResourceGroupListResult.t} | {:error, Tesla.Env.t}
  def resource_groups_list(connection, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query,
      :"$top" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourcegroups")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.ResourceGroupListResult{})
  end

  @doc """
  Updates a resource group.
  Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group to update. The name is case insensitive.
  - parameters (ResourceGroupPatchable): Parameters supplied to update a resource group.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.ResourceGroup{}} on success
  {:error, info} on failure
  """
  @spec resource_groups_update(Tesla.Env.client, String.t, Microsoft.Azure.Management.Resources.Model.ResourceGroupPatchable.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.ResourceGroup.t} | {:error, Tesla.Env.t}
  def resource_groups_update(connection, resource_group_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourcegroups/#{resource_group_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.ResourceGroup{})
  end

  @doc """
  Get all the resources for a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Resources.Connection): Connection to server
  - resource_group_name (String.t): The resource group with the resources to get.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters
    - :__filter (String.t): The filter to apply on the operation.
    - :__expand (String.t): The $expand query parameter
    - :__top (integer()): The number of results to return. If null is passed, returns all resources.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Resources.Model.ResourceListResult{}} on success
  {:error, info} on failure
  """
  @spec resources_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Resources.Model.ResourceListResult.t} | {:error, Tesla.Env.t}
  def resources_list_by_resource_group(connection, resource_group_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query,
      :"$expand" => :query,
      :"$top" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/resources")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Resources.Model.ResourceListResult{})
  end
end
