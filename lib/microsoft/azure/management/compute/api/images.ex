# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Compute.Api.Images do
  @moduledoc """
  API calls for all endpoints tagged `Images`.
  """

  alias Microsoft.Azure.Management.Compute.Connection
  import Microsoft.Azure.Management.Compute.RequestBuilder


  @doc """
  Create or update an image.

  ## Parameters

  - connection (Microsoft.Azure.Management.Compute.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - image_name (String.t): The name of the image.
  - parameters (Image): Parameters supplied to the Create Image operation.
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Compute.Model.Image{}} on success
  {:error, info} on failure
  """
  @spec images_create_or_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Compute.Model.Image.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Compute.Model.Image.t} | {:error, Tesla.Env.t}
  def images_create_or_update(connection, resource_group_name, image_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Compute/images/#{image_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Compute.Model.Image{})
  end

  @doc """
  Deletes an Image.

  ## Parameters

  - connection (Microsoft.Azure.Management.Compute.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - image_name (String.t): The name of the image.
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Compute.Model.OperationStatusResponse{}} on success
  {:error, info} on failure
  """
  @spec images_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Compute.Model.OperationStatusResponse.t} | {:error, Tesla.Env.t}
  def images_delete(connection, resource_group_name, image_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Compute/images/#{image_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Compute.Model.OperationStatusResponse{})
  end

  @doc """
  Gets an image.

  ## Parameters

  - connection (Microsoft.Azure.Management.Compute.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - image_name (String.t): The name of the image.
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters
    - :__expand (String.t): The expand expression to apply on the operation.

  ## Returns

  {:ok, %Microsoft.Azure.Management.Compute.Model.Image{}} on success
  {:error, info} on failure
  """
  @spec images_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Compute.Model.Image.t} | {:error, Tesla.Env.t}
  def images_get(connection, resource_group_name, image_name, api_version, subscription_id, opts \\ []) do
    optional_params = %{
      :"$expand" => :query
    }
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Compute/images/#{image_name}")
    |> add_param(:query, :"api-version", api_version)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Compute.Model.Image{})
  end

  @doc """
  Gets the list of Images in the subscription. Use nextLink property in the response to get the next page of Images. Do this till nextLink is null to fetch all the Images.

  ## Parameters

  - connection (Microsoft.Azure.Management.Compute.Connection): Connection to server
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Compute.Model.ImageListResult{}} on success
  {:error, info} on failure
  """
  @spec images_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Compute.Model.ImageListResult.t} | {:error, Tesla.Env.t}
  def images_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Compute/images")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Compute.Model.ImageListResult{})
  end

  @doc """
  Gets the list of images under a resource group.

  ## Parameters

  - connection (Microsoft.Azure.Management.Compute.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Compute.Model.ImageListResult{}} on success
  {:error, info} on failure
  """
  @spec images_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Compute.Model.ImageListResult.t} | {:error, Tesla.Env.t}
  def images_list_by_resource_group(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Compute/images")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Compute.Model.ImageListResult{})
  end

  @doc """
  Update an image.

  ## Parameters

  - connection (Microsoft.Azure.Management.Compute.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group.
  - image_name (String.t): The name of the image.
  - parameters (ImageUpdate): Parameters supplied to the Update Image operation.
  - api_version (String.t): Client Api Version.
  - subscription_id (String.t): Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Compute.Model.Image{}} on success
  {:error, info} on failure
  """
  @spec images_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Compute.Model.ImageUpdate.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Compute.Model.Image.t} | {:error, Tesla.Env.t}
  def images_update(connection, resource_group_name, image_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Compute/images/#{image_name}")
    |> add_param(:body, :"parameters", parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Compute.Model.Image{})
  end
end
