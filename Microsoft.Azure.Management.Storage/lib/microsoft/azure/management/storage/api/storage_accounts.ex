# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Microsoft.Azure.Management.Storage.Api.StorageAccounts do
  @moduledoc """
  API calls for all endpoints tagged `StorageAccounts`.
  """

  alias Microsoft.Azure.Management.Storage.Connection
  import Microsoft.Azure.Management.Storage.RequestBuilder


  @doc """
  Checks that the storage account name is valid and is not already in use.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - account_name (StorageAccountCheckNameAvailabilityParameters): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.CheckNameAvailabilityResult{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_check_name_availability(Tesla.Env.client, Microsoft.Azure.Management.Storage.Model.StorageAccountCheckNameAvailabilityParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.CheckNameAvailabilityResult.t} | {:error, Tesla.Env.t}
  def storage_accounts_check_name_availability(connection, account_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Storage/checkNameAvailability")
    |> add_param(:body, :body, account_name)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.CheckNameAvailabilityResult{})
  end

  @doc """
  Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - account_name (String.t): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  - parameters (StorageAccountCreateParameters): The parameters to provide for the created account.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.StorageAccount{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_create(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Storage.Model.StorageAccountCreateParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.StorageAccount.t} | {:error, Tesla.Env.t}
  def storage_accounts_create(connection, resource_group_name, account_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts/#{account_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.StorageAccount{})
  end

  @doc """
  Deletes a storage account in Microsoft Azure.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - account_name (String.t): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def storage_accounts_delete(connection, resource_group_name, account_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts/#{account_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - account_name (String.t): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.StorageAccount{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_get_properties(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.StorageAccount.t} | {:error, Tesla.Env.t}
  def storage_accounts_get_properties(connection, resource_group_name, account_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts/#{account_name}")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.StorageAccount{})
  end

  @doc """
  Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.StorageAccountListResult{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.StorageAccountListResult.t} | {:error, Tesla.Env.t}
  def storage_accounts_list(connection, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/providers/Microsoft.Storage/storageAccounts")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.StorageAccountListResult{})
  end

  @doc """
  List SAS credentials of a storage account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - account_name (String.t): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
  - parameters (AccountSasParameters): The parameters to provide to list SAS credentials for the storage account.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.ListAccountSasResponse{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_list_account_sas(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Storage.Model.AccountSasParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.ListAccountSasResponse.t} | {:error, Tesla.Env.t}
  def storage_accounts_list_account_sas(connection, resource_group_name, account_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts/#{account_name}/ListAccountSas")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.ListAccountSasResponse{})
  end

  @doc """
  Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.StorageAccountListResult{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_list_by_resource_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.StorageAccountListResult.t} | {:error, Tesla.Env.t}
  def storage_accounts_list_by_resource_group(connection, resource_group_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.StorageAccountListResult{})
  end

  @doc """
  Lists the access keys for the specified storage account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - account_name (String.t): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.StorageAccountListKeysResult{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_list_keys(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.StorageAccountListKeysResult.t} | {:error, Tesla.Env.t}
  def storage_accounts_list_keys(connection, resource_group_name, account_name, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts/#{account_name}/listKeys")
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.StorageAccountListKeysResult{})
  end

  @doc """
  List service SAS credentials of a specific resource.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - account_name (String.t): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  - parameters (ServiceSasParameters): The parameters to provide to list service SAS credentials.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.ListServiceSasResponse{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_list_service_sas(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Storage.Model.ServiceSasParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.ListServiceSasResponse.t} | {:error, Tesla.Env.t}
  def storage_accounts_list_service_sas(connection, resource_group_name, account_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts/#{account_name}/ListServiceSas")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.ListServiceSasResponse{})
  end

  @doc """
  Regenerates one of the access keys for the specified storage account.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - account_name (String.t): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  - regenerate_key (StorageAccountRegenerateKeyParameters): Specifies name of the key which should be regenerated -- key1 or key2.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.StorageAccountListKeysResult{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_regenerate_key(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Storage.Model.StorageAccountRegenerateKeyParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.StorageAccountListKeysResult.t} | {:error, Tesla.Env.t}
  def storage_accounts_regenerate_key(connection, resource_group_name, account_name, regenerate_key, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts/#{account_name}/regenerateKey")
    |> add_param(:body, :body, regenerate_key)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.StorageAccountListKeysResult{})
  end

  @doc """
  The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.

  ## Parameters

  - connection (Microsoft.Azure.Management.Storage.Connection): Connection to server
  - resource_group_name (String.t): The name of the resource group within the user&#39;s subscription. The name is case insensitive.
  - account_name (String.t): The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  - parameters (StorageAccountUpdateParameters): The parameters to provide for the updated account.
  - api_version (String.t): The API version to use for this operation.
  - subscription_id (String.t): The ID of the target subscription.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %Microsoft.Azure.Management.Storage.Model.StorageAccount{}} on success
  {:error, info} on failure
  """
  @spec storage_accounts_update(Tesla.Env.client, String.t, String.t, Microsoft.Azure.Management.Storage.Model.StorageAccountUpdateParameters.t, String.t, String.t, keyword()) :: {:ok, Microsoft.Azure.Management.Storage.Model.StorageAccount.t} | {:error, Tesla.Env.t}
  def storage_accounts_update(connection, resource_group_name, account_name, parameters, api_version, subscription_id, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/subscriptions/#{subscription_id}/resourceGroups/#{resource_group_name}/providers/Microsoft.Storage/storageAccounts/#{account_name}")
    |> add_param(:body, :body, parameters)
    |> add_param(:query, :"api-version", api_version)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Microsoft.Azure.Management.Storage.Model.StorageAccount{})
  end
end
